#!/bin/bash

# gettext support
. gettext.sh
export TEXTDOMAIN=lernstick-exam-client

DEBUG=true
wget="/usr/bin/wget"
wgetOptions="--timeout=10 --tries=3"
zenity="/usr/bin/zenity"
python="/usr/bin/python"
md5sum="/usr/bin/md5sum"
examSquashfs="/run/initramfs/squashfs/exam.squashfs"
baseSquashfs="/lib/live/mount/medium/live/filesystem.squashfs"
retoreStateFile="/run/initramfs/restore"
infoFile="/run/initramfs/info"
timeout=10
configFile="/etc/lernstick-exam-client.conf"
pid=$$

# source os-release
. /etc/os-release

wgetErrors=(
  "$(gettext "No problems occurred.")"
  "$(gettext "Generic error code.")"
  "$(gettext "Parse error---for instance, when parsing command-line options, the '.wgetrc' or '.netrc'...")"
  "$(gettext "File I/O error.")"
  "$(gettext "Network failure.")"
  "$(gettext "SSL verification failure.")"
  "$(gettext "Username/password authentication failure.")"
  "$(gettext "Protocol errors.")"
  "$(gettext "Server issued an error response.")"
)

# transmit state to server
function clientState()
{
  $DEBUG && \
    ${wget} ${wgetOptions} -qO- "${urlNotify//\{state\}/$1}" 1>&2 || \
    ${wget} ${wgetOptions} -qO- "${urlNotify//\{state\}/$1}" 2>&1 >/dev/null
  $DEBUG && >&2 echo "New client state: $1"
}

function killtree()
{
  local _pid=$1
  local _sig=${2:-15}
  #kill -stop ${_pid} # needed to stop quickly forking parent from producing children between child killing and parent killing
  for _child in $(ps -o pid --no-headers --ppid ${_pid}); do
    killtree ${_child} ${_sig}
  done
  [ "${BASHPID}" = "${_pid}" ] || kill -${_sig} ${_pid} 2>/dev/null
}

function do_exit()
{
  $DEBUG && >&2 echo "exiting cleanly"

  # revert all changes to iptables
  iptables-save | grep -v "searchExamServer" | iptables-restore

  # cleanup firewall whitelist
  if [ "${VERSION_ID}" = "9" ]; then
    diff --unchanged-group-format="" <(echo "^${gladosProto}://${gladosIp}" | sed 's/\./\\\./g') /etc/lernstick-firewall/url_whitelist >/tmp/url_whitelist
  else
    diff --unchanged-group-format="" <(echo "^${gladosProto}://${gladosIp}") /etc/lernstick-firewall/url_whitelist >/tmp/url_whitelist
  fi
  cat /tmp/url_whitelist >/etc/lernstick-firewall/url_whitelist

  # unmount the filesystem
  umount /run/initramfs/newroot 2>/dev/null
  umount -l /run/initramfs/{base,exam} 2>/dev/null

  [ "${VERSION_ID}" = "9" ] && pkill --signal 1 squid

  killtree $pid
  exit
}
trap do_exit EXIT

# find all instances of this script an stop them
function killRunningInstances()
{
  MYPID=$$
  ps xao pid,pgid,ppid,cmd | awk '/\/bin\/bash \/usr\/bin\/[s]earchExamServer/{print $1" "$2" "$3}' | while read -r pid pgid ppid; do
    if [ "${MYPID}" -ne "${pid}" ] && [ "${MYPID}" -ne "${ppid}" ]; then
      cpids=$(pgrep -P ${pid})
      $DEBUG && >&2 echo "killing ${pid} ${cpids}"
      kill ${pid} ${cpids} 2>/dev/null
    fi
  done
}

function setup_chroot()
{
  mount /lib/live/mount/medium/live/filesystem.squashfs /run/initramfs/base
  mount /run/initramfs/squashfs/exam.squashfs /run/initramfs/exam
  mount -t aufs -o br=/run/initramfs/backup=rw:/run/initramfs/exam=ro:/run/initramfs/base=ro none "/run/initramfs/newroot"
}

function config_value()
{
  if [ -n "${config}" ]; then
    config="$(${wget} ${wgetOptions} -qO- "${urlConfig}")"
    retval=$?
    if [ ${retval} -ne 0 ]; then
      WGET_ERROR="${wgetErrors[$retval]} (${retval})"
      >&2 echo "wget failed while fetching the system config. Error: ${WGET_ERROR}."
      ${zenity} --error --title "$(gettext "Wget error")" --text "$(eval_gettext "wget failed while fetching the system config. Error: \${WGET_ERROR}.")"
      do_exit
    fi
  fi

  v="$(echo "${config}" | ${python} -c 'import sys, json; print json.load(sys.stdin)["config"]["'${1}'"]')"
  $DEBUG && >&2 echo "${1} is set to ${v}"
  echo "$v"
}


cat <<'EOF' >/tmp/convert.py
import re
import sys
import fileinput

while 1:
    try:
        line = sys.stdin.readline()
    except KeyboardInterrupt:
        break

    if not line:
        break

    decimals_to_hex = re.sub(r'\\(\d+)', lambda match: '\\x{:x}'.format(int(match.group(1))), str.encode(line[:-1]))
    result = decimals_to_hex.decode('string_escape')
    print(result)
EOF

# start here
killRunningInstances

# allow bonjour/zeroconf
iptables -I INPUT -p udp --dport 5353 -d 224.0.0.251 -m comment --comment "searchExamServer" -j ACCEPT
iptables -I OUTPUT -p udp --dport 5353 -d 224.0.0.251 -m comment --comment "searchExamServer" -j ACCEPT

export DISPLAY=:0
export $(strings /proc/*/environ | grep -P "^XAUTHORITY=" | head -1)

# create the directory structure and cleanup
mkdir -p "/run/initramfs/"{newroot,base,exam,tmpfs,squashfs,backup/home/user}
chown user:user "/run/initramfs/backup/home/user"
#>"${examSquashfs}"
rm -f "${retoreStateFile}" 2>/dev/null
rm -f /tmp/zenity1 2>/dev/null

[ -r "${infoFile}" ] && . ${infoFile}

# if a configfile is used, don't display a selection list and use the config values instead
if [ -r "${configFile}" ]; then
  fixed="true"
  
  exec 1> >(${zenity} --progress --pulsate --no-cancel --title="$(gettext "Search")" --text="$(gettext "Searching for exam server.")" --auto-close)

  $DEBUG && >&2 echo "Configfile found, using ${configFile}."
  . "${configFile}"
  AVAHI="$(cat "${configFile}")"
  eth="$(ip -s route get ${gladosIp} | perl -ne 'print $1 if /dev[\s]+([^\s]+)/')"

else
  fixed="false"

  # show the selection list until the user has chosen one
  while [ -z "$(cat /tmp/zenity1 2>/dev/null)" ]; do

    # display the list
    exec 1> >(${zenity} --list \
      --title="$(gettext "Searching for exam server.")" \
      --text "$(gettext "The following list of exam servers was found in the network. Please select the one you want to use.")" \
      --column "#" \
      --column "$(gettext "Name")" \
      --column "$(gettext "IP")" \
      --column "$(gettext "Host")" \
      --column "$(gettext "Port")" \
      --column "$(gettext "Protocol")" \
      --column "$(gettext "Interface")" \
      --hide-column=1 \
      --width=700 \
      --height=220 >/tmp/zenity1 || do_exit; kill $(cat /tmp/pid1) 2>/dev/null)

    # retrieve exam servers in the net
    ( avahi-browse -rp --no-db-lookup _http._tcp & echo $! >&3 ) 3>/tmp/pid1 | \
      stdbuf -oL awk -W interactive -F";" 'BEGIN{d=0;}
        $1=="=" && $3=="IPv4" && $10~/Glados/{
          print $0 > "/tmp/avahi-orig";
          printf "%d\n%s\n%s\n%s\n%s\n%s\n%s\n", ++d, $4, $8, $7, $9, $8==443 ? "https" : "http", $2;
        }' | \
      ${python} -u /tmp/convert.py

    exec 1>&-; exec 1>&0

  done

  # get the choice
  num=$(cat /tmp/zenity1)
  AVAHI="$(sed "${num}q;d" /tmp/avahi-orig)"

  # parse the output
  gladosIp="$(echo "${AVAHI}" | awk -F";" '{print $8;exit}')"
  gladosHost="$(echo "${AVAHI}" | awk -F";" '{print $7;exit}')"
  gladosPort="$(echo "${AVAHI}" | awk -F";" '{print $9;exit}')"
  gladosDesc="$(echo "${AVAHI}" | awk -F";" '{print $4;exit}' | ${python} -u /tmp/convert.py)"
  eth="$(echo "${AVAHI}" | awk -F";" '{print $2;exit}')"

  if [ "$gladosPort" = "443" ]; then
    gladosProto="https"
  else
    gladosProto="http"
  fi

fi

if [ -z "$gladosIp" ] || [ -z "$gladosPort" ]; then
  $DEBUG && >&2 echo "Glados host not found."
  zenity --error --title="$(gettext "Error")" --text="$(gettext "Glados host not found.")"
  do_exit
fi

# parse the action URLs
for action in Download Finish Notify SSHKey Md5 Config; do
  if echo "$AVAHI" | grep -qP "action${action}=\'([^\']+)\'"; then
    match="$(echo "$AVAHI" | sed -r "s/.*action${action}='([^']+)'.*/\1/")"
    declare action${action}="${gladosProto}://${gladosIp}:${gladosPort}/${match}"
  else
    ERROR_MESSAGE="$(gettext "action\${action} not found in txt field.")"
    $DEBUG && >&2 echo "${ERROR_MESSAGE}"
    zenity --error --title="$(gettext "Error")" --text="${ERROR_MESSAGE}"
    do_exit
  fi
done

$DEBUG && >&2 echo "Exam server found."
echo "#$(gettext "Exam server found.")"
sleep 1

if [ "$fixed" = "true" ]; then
  # redirect STDOUT back to the console
  exec 1>&-; exec 1>&0

  # Ask the user to proceed
  if ! ${zenity} --question --title="$(gettext "Continue")" --text="$(eval_gettext "An exam server (\${gladosDesc}) was found in the network (\${eth}). Switch to exam mode?")"; then
    do_exit
  fi
fi

ZENITY_TITLE="$(gettext "SSH Key")"
ZENITY_TEXT="$(gettext "Fetching SSH Key from the server.")"
exec 1> >(${zenity} --progress --pulsate --no-cancel --title="${ZENITY_TITLE}" --text="${ZENITY_TEXT}" --auto-close)

# open ports in the firewall
if [ "${VERSION_ID}" = "9" ]; then
  echo "^${gladosProto}://${gladosIp}" | sed 's/\./\\\./g'  >>/etc/lernstick-firewall/url_whitelist
else
  echo "^${gladosProto}://${gladosIp}" >>/etc/lernstick-firewall/url_whitelist
fi

sed -i '$!N; /^\(.*\)\n\1$/!P; D' /etc/lernstick-firewall/url_whitelist
service lernstick-firewall restart
[ "${VERSION_ID}" = "9" ] && pkill --signal 1 squid
iptables -I INPUT -p tcp --dport 22 -s ${gladosIp} -m comment --comment "searchExamServer" -j ACCEPT
iptables -I OUTPUT -p tcp --dport ${gladosPort} -d ${gladosIp} -m comment --comment "searchExamServer" -j ACCEPT

# this sleep is needed, else wget would fail (network error, 4)
sleep 1

# get the SSH key
sshKey="$(${wget} ${wgetOptions} -qO- "${actionSSHKey}")"

retval=$?
if [ ${retval} -ne 0 ]; then
  WGET_ERROR="${wgetErrors[$retval]} (${retval})"
  >&2 echo "wget failed while fetching the SSH key. Error: ${WGET_ERROR}."
  ${zenity} --error --title "$(gettext "Wget error")" --text "$(eval_gettext "wget failed while fetching the SSH key. Error: \${WGET_ERROR}.")"
  do_exit
fi

# create environment
mkdir -p "/root/.ssh"
chmod 700 "/root/.ssh"
echo "${sshKey}" >>"/root/.ssh/authorized_keys"


  # write the info file
  cat <<EOF >"${infoFile}"
    gladosIp="${gladosIp}"
    gladosHost="${gladosHost}"
    gladosPort="${gladosPort}"
    gladosProto="${gladosProto}"
    partitionSystem="$(blkid -l -L system)"
    actionDownload="${actionDownload}"
    actionFinish="${actionFinish}"
    actionNotify="${actionNotify}"
    actionMd5="${actionMd5}"
    actionConfig="${actionConfig}"
    sshKey="${sshKey}"
EOF

# remount /run without noexec (Debian 9 changed this, /run/initramfs/shutdown will not be executed elsewhere)
mount -n -o remount,exec /run

url="${actionDownload//\{token\}/$token}"

cat <<EOF >"/run/initramfs/init.html"
<!DOCTYPE html>
<html lang='en-US'>
    <head>
        <meta charset='UTF-8'>
        <meta name='viewport' content='width=device-width, initial-scale=1'>
        <meta http-equiv='refresh' content='0;url=${url}' />
    </head>
    <body>
    Please wait, redirecting...
    </body>
</html>
EOF

# firefox should not be run as root in a regular users session, and it's not supported anymore
sudo -u user /usr/bin/firefox -createprofile "searchExamServer /tmp/searchExamServer"

exec 1>&-; exec 1>&0

sudo -u user /usr/bin/firefox -P "searchExamServer" -width 800 -height 310 -chrome "/run/initramfs/init.html"

