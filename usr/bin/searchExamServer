#!/bin/bash

DEBUG=true
wget="/usr/bin/wget"
zenity="/usr/bin/zenity"
python="/usr/bin/python"
md5sum="/usr/bin/md5sum"
examSquashfs="/run/initramfs/squashfs/exam.squashfs"
baseSquashfs="/lib/live/mount/medium/live/filesystem.squashfs"
retoreStateFile="/run/initramfs/restore"
infoFile="/run/initramfs/info"
timeout=10

# transmit state to server
function clientState()
{
  echo "$1"
  ${wget} -qO- "${urlNotify//\{state\}/$1}" 2>&1 >/dev/null
}

function do_exit()
{
  $DEBUG && >&2 echo "exiting cleanly"

  # revert all changes to iptables
  iptables-save | grep -v "searchExamServer" | iptables-restore

  # unmount the filesystem
  umount /run/initramfs/newroot
  umount -l /run/initramfs/{base,exam}
  exit
}
trap do_exit EXIT

# vertify MD5 checksum of exam file
function validExamFile()
{
  if [ -e "${examSquashfs}" ]; then
    if file "${examSquashfs}" | grep -qi "squashfs filesystem"; then
      exec 1> >(${zenity} --progress --pulsate --no-cancel --title="Verifying" --text="Verifying exam file." --auto-close)
      clientState "verifying md5 sum"
      md5Local="$(${md5sum} "${examSquashfs}" | cut -c1-32)"
      md5Srv="$(${wget} -qO- "${urlMd5}")"
      exec 1>&-; exec 1>&0
      if [ "${md5Local}" = "${md5Srv}" ]; then
        return 0
      else
        clientState "md5 sum wrong"
        ${zenity} --error --title "MD5 sum wrong" --text "MD5 check failed, please try again."
      fi
    fi
  fi
  return 1
}

# find all instances of this script an stop them
function killRunningInstances()
{
  MYPID=$$
  ps xao pid,pgid,ppid,cmd | awk '/\/bin\/bash \/usr\/bin\/[s]earchExamServer/{print $1" "$2" "$3}' | while read -r pid pgid ppid; do
    if [ "${MYPID}" -ne "${pid}" ] && [ "${MYPID}" -ne "${ppid}" ]; then
      cpids=$(pgrep -P ${pid})
      kill ${pid} ${cpids} 2>/dev/null
    fi
  done
}

function setup_chroot()
{
  mount /lib/live/mount/medium/live/filesystem.squashfs /run/initramfs/base
  mount /run/initramfs/squashfs/exam.squashfs /run/initramfs/exam
  mount -t aufs -o br=/run/initramfs/backup=rw:/run/initramfs/exam=ro:/run/initramfs/base=ro none "/run/initramfs/newroot"
}

function config_value()
{
  if [ -n "${config}" ]; then
    config="$(${wget} -qO- "${urlConfig}")"
    retval=$?
    if [ ${retval} -ne 0 ]; then
      >&2 echo "wget failed while fetching the system config (return value: ${retval})."
      ${zenity} --error --title "Wget error" --text "wget failed while fetching the system config (return value: ${retval})."
      do_exit
    fi
  fi

  v="$(echo "${config}" | ${python} -c 'import sys, json; print json.load(sys.stdin)["config"]["'${1}'"]')"
  $DEBUG && >&2 echo "${1} is set to ${v}"
  echo "$v"
}


# start here
killRunningInstances

# allow bonjour/zeroconf
iptables -I INPUT -p udp --dport 5353 -d 224.0.0.251 -m comment --comment "searchExamServer" -j ACCEPT
iptables -I OUTPUT -p udp --dport 5353 -d 224.0.0.251 -m comment --comment "searchExamServer" -j ACCEPT

export DISPLAY=:0

# create the directory structure and cleanup
mkdir -p "/run/initramfs/"{newroot,base,exam,tmpfs,squashfs,backup/home/user}
chown user:user "/run/initramfs/backup/home/user"
>"${examSquashfs}"
rm -f "${retoreStateFile}" 2>/dev/null

# redirect STDOUT to zenity
exec 1> >(${zenity} --progress --pulsate --no-cancel --title="Search" --text="Searching for exam server." --auto-close)

# run avahi-browse for n seconds or until a exam server was found
AVAHI="$(( /usr/bin/timeout ${timeout} avahi-browse -rp --no-db-lookup _http._tcp & echo $! >&3 ) 3>/tmp/pid | \
  awk -W interactive -F";" '$1=="="&&$3=="IPv4"&&$4~/Glados/{print;"cat /tmp/pid" | getline p; system("kill "p);}')"

# parse the output
gladosIp="$(echo "${AVAHI}" | awk -F";" '{print $8;exit}')"
gladosHost="$(echo "${AVAHI}" | awk -F";" '{print $7;exit}')"
gladosPort="$(echo "${AVAHI}" | awk -F";" '{print $9;exit}')"
eth="$(echo "${AVAHI}" | awk -F";" '{print $2;exit}')"

if [ "$gladosPort" = "443" ]; then
  gladosProto="https"
else
  gladosProto="http"
fi

if [ -z "$gladosIp" ] || [ -z "$gladosPort" ] || [ -z "$gladosHost" ]; then
  $DEBUG && >&2 echo "Glados host not found."
  do_exit
fi

# parse the action URLs
if [[ $AVAHI =~ \"actionDownload=\'([^\']+)\'\" ]]; then
  actionDownload="${gladosProto}://${gladosIp}:${gladosPort}/${BASH_REMATCH[1]}"
else
  $DEBUG && >&2 echo "actionDownload not found in txt field."
  do_exit
fi

if [[ $AVAHI =~ \"actionFinish=\'([^\']+)\'\" ]]; then
  actionFinish="${gladosProto}://${gladosIp}:${gladosPort}/${BASH_REMATCH[1]}"
else
  $DEBUG && >&2 echo "actionFinish not found in txt field."
  do_exit
fi

if [[ $AVAHI =~ \"actionNotify=\'([^\']+)\'\" ]]; then
  actionNotify="${gladosProto}://${gladosIp}:${gladosPort}/${BASH_REMATCH[1]}"
else
  $DEBUG && >&2 echo "actionNotify not found in txt field."
  do_exit
fi

if [[ $AVAHI =~ \"actionSSHKey=\'([^\']+)\'\" ]]; then
  actionSSHKey="${gladosProto}://${gladosIp}:${gladosPort}/${BASH_REMATCH[1]}"
else
  $DEBUG && >&2 echo "actionSSHKey not found in txt field."
  do_exit
fi

if [[ $AVAHI =~ \"actionMd5=\'([^\']+)\'\" ]]; then
  actionMd5="${gladosProto}://${gladosIp}:${gladosPort}/${BASH_REMATCH[1]}"
else
  $DEBUG && >&2 echo "actionMd5 not found in txt field."
  do_exit
fi

if [[ $AVAHI =~ \"actionConfig=\'([^\']+)\'\" ]]; then
  actionConfig="${gladosProto}://${gladosIp}:${gladosPort}/${BASH_REMATCH[1]}"
else
  $DEBUG && >&2 echo "actionConfig not found in txt field."
fi

$DEBUG && >&2 echo "Exam server found."
echo "#Exam server found."
sleep 1

# redirect STDOUT back to the console
exec 1>&-; exec 1>&0

# Ask the user to proceed
if ! ${zenity} --question --title="Continue" --text="An exam server was found in the network (${eth}). Switch to exam mode?"; then
  do_exit
fi

# open ports in the firewall
echo "${gladosProto}://${gladosIp}:${gladosPort}" >>/etc/lernstick-firewall/url_whitelist
sed -i '$!N; /^\(.*\)\n\1$/!P; D' /etc/lernstick-firewall/url_whitelist
service lernstick-firewall reload
iptables -I INPUT -p tcp --dport 22 -s ${gladosIp} -m comment --comment "searchExamServer" -j ACCEPT
iptables -I OUTPUT -p tcp --dport ${gladosPort} -d ${gladosIp} -m comment --comment "searchExamServer" -j ACCEPT

exec 1> >(${zenity} --progress --pulsate --no-cancel --title="SSH Key" --text="Fetching SSH Key from the exam server." --auto-close)

# get the SSH key
sshKey="$(${wget} -qO- "${actionSSHKey}")"
retval=$?
if [ ${retval} -ne 0 ]; then
  >&2 echo "wget failed while fetching the SSH key (return value: ${retval})."
  ${zenity} --error --title "Wget error" --text "wget failed while fetching the SSH key (return value: ${retval})."
  do_exit
fi

# create environment
mkdir -p "/root/.ssh"
chmod 700 "/root/.ssh"
echo "${sshKey}" >>"/root/.ssh/authorized_keys"

exec 1>&-; exec 1>&0

# loop until exam squashfs is a valid squashfs
until validExamFile; do

  # loop until the user provided a valid token
  until [[ ${tk} =~ ^[0-9a-z]{8,}$ ]]; do
    token="$(cat /tmp/token)"
    tk="$(${zenity} --entry --title="Exam Token" --text="Please enter the token given on your exam sheet:" --entry-text "${token}")"
    retval=$?
    token=$tk

    # store the token in /tmp
    [ -n "${token}" ] && echo "${token}" >/tmp/token
    [ ${retval} = 1 ] && do_exit
  done
  tk=""

  # replace the placeholder {token} in the URLs
  urlDownload="${actionDownload//\{token\}/$token}"
  urlFinish="${actionFinish//\{token\}/$token}"
  urlNotify="${actionNotify//\{token\}/$token}"
  urlMd5="${actionMd5//\{token\}/$token}"
  urlConfig="${actionConfig//\{token\}/$token}"

  # write the info file
  cat <<EOF >"${infoFile}"
    gladosIp="${gladosIp}"
    gladosHost="${gladosHost}"
    gladosPort="${gladosPort}"
    urlDownload="${urlDownload}"
    urlFinish="${urlFinish}"
    urlNotify="${urlNotify}"
    urlMd5="${urlMd5}"
    partitionSystem="$(blkid -l -L system)"
EOF

  # download the filesystem
  ${wget} --progress=dot -O "${examSquashfs}" "${urlDownload}" 2>&1 | \
    awk -W interactive '{print $7}' | \
    ${zenity} --progress --no-cancel --title="Exam download" --text="Please wait while downloading exam filesystem..." --percentage=0 --auto-close

  wgetRetval=${PIPESTATUS[0]}
  if [ ${wgetRetval} -ne 0 ]; then
    ${zenity} --error --title "Wget error" --text "wget failed while fetching the exam (return value: ${wgetRetval}).";
    do_exit
  fi

  # check the downloaded filesystem
  if file "${examSquashfs}" | grep -qi "ASCII text"; then
    # something went wrong
    code="$(${python} -c 'import sys, json; print json.load(sys.stdin)["code"]' <"${examSquashfs}")"
    msg="$(${python} -c 'import sys, json; print json.load(sys.stdin)["msg"]' <"${examSquashfs}")"
    ${zenity} --error --title "Error ${code}" --text "${msg}"
  elif ! file "${examSquashfs}" | grep -qi "squashfs filesystem"; then
    ${zenity} --error --title "Unknown error" --text "An unknown error occured."
  fi

done

exec 1> >(${zenity} --progress --pulsate --no-cancel --title="Waiting for server" --text="Waiting for the latest restore to complete. This may take a few minutes..." --auto-close)
echo "restore latest backup if available"
clientState "waiting for restore..."

# if there is already a backup on the server, a restore process is started at this point.
# The script has to wait until the restore is done. This is, when the restore state file
# contains a single "0".
retoreState=$(cat "${retoreStateFile}" 2>/dev/null)
until [ "${retoreState}" = "0" ]; do
  echo "${retoreState}"
  sleep 2
  retoreState=$(cat "${retoreStateFile}" 2>/dev/null)
done
exec 1>&-; exec 1>&0

exec 1> >(${zenity} --progress --pulsate --no-cancel --title="Mount" --text="Preparing system." --auto-close)
clientState "preparing system"

# create necessary directory structure
mkdir -p "/run/initramfs/backup/etc/NetworkManager/"{system-connections,dispatcher.d}
mkdir -p "/run/initramfs/backup/home/user/Schreibtisch/"
mkdir -p "/run/initramfs/backup/usr/bin/"
mkdir -p "/run/initramfs/backup/usr/sbin/"
mkdir -p "/run/initramfs/backup/etc/live/config/"
mkdir -p "/run/initramfs/backup/etc/lernstick-firewall/"
mkdir -p "/run/initramfs/backup/etc/avahi/"
mkdir -p "/run/initramfs/backup/root/.ssh"

# set proper permissions
chown user:user "/run/initramfs/backup/home/user/Schreibtisch/"
chown user:user "/run/initramfs/backup/home/user/"
chmod 755 "/run/initramfs/backup/root"
chmod 700 "/run/initramfs/backup/root/.ssh"

# get all active network connections
con=$(LC_ALL=C nmcli -t -f state,connection d status | awk -F: '$1=="connected"{print $2}')
echo "${con}" | LC_ALL=C xargs -I{} cp -p "/etc/NetworkManager/system-connections/{}" "/run/initramfs/backup/etc/NetworkManager/system-connections/"

# edit copied connections manually, because nmcli will remove the wifi-sec.psk password when edited by nmcli modify
#sed -i '/\[connection\]/a permissions=user:root:;' /run/initramfs/backup/etc/NetworkManager/system-connections/*

# copy needed scripts and files
cp -p "/etc/NetworkManager/dispatcher.d/02searchExamServer" "/run/initramfs/backup/etc/NetworkManager/dispatcher.d/02searchExamServer"
cp -p "/usr/bin/finishExam" "/run/initramfs/backup/usr/bin/finishExam"

# those should be removed as fast as possible
cp -p "/usr/bin/lernstick_backup" "/run/initramfs/backup/usr/bin/lernstick_backup" #TODO: remove
cp -p "/usr/bin/lernstick_autostart" "/run/initramfs/backup/usr/bin/lernstick_autostart" #TODO: remove
cp -p "/usr/sbin/lernstick-firewall" "/run/initramfs/backup/usr/sbin/lernstick-firewall" #TODO: remove
cp -p "/etc/lernstick-firewall/lernstick-firewall.conf" "/run/initramfs/backup/etc/lernstick-firewall/lernstick-firewall.conf" #TODO: remove

cp -p "/etc/lernstickWelcome" "/run/initramfs/backup/etc/lernstickWelcome"
sed -i 's/ShowNotUsedInfo=.*/ShowNotUsedInfo=false/g' "/run/initramfs/backup/etc/lernstickWelcome"
sed -i 's/AutoStartInstaller=.*/AutoStartInstaller=false/g' "/run/initramfs/backup/etc/lernstickWelcome"
echo "ShowExamInfo=true" >>"/run/initramfs/backup/etc/lernstickWelcome" #TODO: replace with sed
cp -p "/usr/share/applications/finish_exam.desktop" "/run/initramfs/backup/home/user/Schreibtisch/"
chown user:user "/run/initramfs/backup/home/user/Schreibtisch/finish_exam.desktop"

# This is to fix an issue when the DNS name of the exam server end in .local (which is the case in most Microsoft
# domain environments). In case if a .local name the mDNS policy in /etc/nsswitch.conf will catch. This ends in ssh
# login delays of up to 20 seconds. Changing it to .alocal is a workaround. Better is not to use mDNS in an exam.
sed 's/#domain-name=local/domain-name=.alocal/' /etc/avahi/avahi-daemon.conf >/run/initramfs/backup/etc/avahi/avahi-daemon.conf

# apply specific config if available
setup_chroot

if [ -n "${actionConfig}" ]; then
  # get the config
  config="$(${wget} -qO- "${urlConfig}")"
  retval=$?
  if [ ${retval} -ne 0 ]; then
    >&2 echo "wget failed while fetching the system config (return value: ${retval})."
    ${zenity} --error --title "Wget error" --text "wget failed while fetching the system config (return value: ${retval})."
    do_exit
  fi

  # config->grp_netdev
  if [ "$(config_value "grp_netdev")" = "False" ]; then
  #if [ $(echo "${config}" | ${python} -c 'import sys, json; print json.load(sys.stdin)["config"]["grp_netdev"]') = "False" ]; then
    chroot /run/initramfs/newroot gpasswd -d user netdev
  else
    chroot /run/initramfs/newroot gpasswd -a user netdev
  fi

  # config->allow_sudo
  if [ "$(config_value "allow_sudo")" = "False" ]; then
  #if [ $(echo "${config}" | ${python} -c 'import sys, json; print json.load(sys.stdin)["config"]["allow_sudo"]') = "False" ]; then
    sed '/user  ALL=(ALL) PASSWD: ALL/ s/^/#/' /etc/sudoers >/run/initramfs/backup/etc/sudoers
  else
    sed '/^#user  ALL=(ALL) PASSWD: ALL/ s/^#//' /etc/sudoers >/run/initramfs/backup/etc/sudoers
  fi


  # config->allow_sudo
  if [ "$(config_value "allow_mount")" = "False" ]; then
  #if [ $(echo "${config}" | ${python} -c 'import sys, json; print json.load(sys.stdin)["config"]["allow_mount"]') = "False" ]; then
    chroot /run/initramfs/newroot sed -i 's/^ResultAny=.*/ResultAny=auth_self/;s/^ResultInactive=.*/ResultInactive=auth_self/;s/^ResultActive=.*/ResultActive=auth_self/' /etc/polkit-1/localauthority/50-local.d/10-udisks2.pkla
  else
    chroot /run/initramfs/newroot sed -i 's/^ResultAny=.*/ResultAny=yes/;s/^ResultInactive=.*/ResultInactive=yes/;s/^ResultActive=.*/ResultActive=yes/' /etc/polkit-1/localauthority/50-local.d/10-udisks2.pkla
  fi

  # config->firewall_off
  if [ "$(config_value "firewall_off")" = "False" ]; then
  #if [ $(echo "${config}" | ${python} -c 'import sys, json; print json.load(sys.stdin)["config"]["firewall_off"]') = "False" ]; then
    chroot /run/initramfs/newroot systemctl enable lernstick-firewall.service
  else
    chroot /run/initramfs/newroot systemctl disable lernstick-firewall.service
  fi

else
  # these are the default values, if the exam server does not provide a config file and the exam file has not configured them
  $DEBUG && >&2 echo "no config available, setting default values"

  # remove user from the netdev group to prevent him from changing network connections
  chroot /run/initramfs/newroot gpasswd -d user netdev

  # remove sudo privileges
  sed '/user  ALL=(ALL) PASSWD: ALL/ s/^/#/' /etc/sudoers >/run/initramfs/backup/etc/sudoers

  # prevent user from mounting external media
  chroot /run/initramfs/newroot sed -i 's/^ResultAny=.*/ResultAny=auth_self/;s/^ResultInactive=.*/ResultInactive=auth_self/;s/^ResultActive=.*/ResultActive=auth_self/' /etc/polkit-1/localauthority/50-local.d/10-udisks2.pkla

  # enable the firewall
  chroot /run/initramfs/newroot systemctl enable lernstick-firewall.service

fi

# hand over the ssh key from the exam server
echo "${sshKey}" >>"/run/initramfs/backup/root/.ssh/authorized_keys"

# hand over open ports
echo "tcp ${gladosIp} 22" >>/run/initramfs/backup/etc/lernstick-firewall/net_whitelist_input
echo "${gladosProto}://${gladosIp}:${gladosPort}" >>/run/initramfs/backup/etc/lernstick-firewall/url_whitelist
echo "tcp ${gladosIp} ${gladosPort}" >>/run/initramfs/backup/etc/lernstick-firewall/net_whitelist

sleep 1
exec 1>&-; exec 1>&0

if $DEBUG; then
  if ${zenity} --question --title="Continue" --text="The system setup is done Continue?"; then
    clientState "continue bootup"
    halt
  fi
else
  # timeout for 10 seconds
  for i in {1..10}; do
    echo "${i}0"
    echo "#The system will continue in $((10 - $i)) seconds"
    sleep 1
  done | ${zenity} --progress --no-cancel --title="Continue" --text="The system will continue in 10 seconds" --percentage=0 --auto-close
  clientState "continue bootup"
  halt
fi

do_exit

