#!/bin/bash

DEBUG=true
wget="/usr/bin/wget"
wgetOptions="--dns-timeout=30"
zenity="/usr/bin/zenity"
python="/usr/bin/python"
md5sum="/usr/bin/md5sum"
examSquashfs="/run/initramfs/squashfs/exam.squashfs"
baseSquashfs="/lib/live/mount/medium/live/filesystem.squashfs"
retoreStateFile="/run/initramfs/restore"
infoFile="/run/initramfs/info"
timeout=10
configFile="/etc/lernstick-exam-client.conf"

# transmit state to server
function clientState()
{
  $DEBUG && \
    ${wget} ${wgetOptions} -qO- "${urlNotify//\{state\}/$1}" 1>&2 || \
    ${wget} ${wgetOptions} -qO- "${urlNotify//\{state\}/$1}" 2>&1 >/dev/null
  $DEBUG && >&2 echo "New client state: $1"
}

function do_exit()
{
  $DEBUG && >&2 echo "exiting cleanly"

  # revert all changes to iptables
  iptables-save | grep -v "searchExamServer" | iptables-restore

  # unmount the filesystem
  umount /run/initramfs/newroot
  umount -l /run/initramfs/{base,exam}
  exit
}
trap do_exit EXIT

# vertify MD5 checksum of exam file
function validExamFile()
{
  if [ -e "${examSquashfs}" ]; then
    if file "${examSquashfs}" | grep -qi "squashfs filesystem"; then
      exec 1> >(${zenity} --progress --pulsate --no-cancel --title="Verifying" --text="Verifying exam file." --auto-close)
      clientState "verifying md5 sum"
      md5Local="$(${md5sum} "${examSquashfs}" | cut -c1-32)"
      md5Srv="$(${wget} ${wgetOptions} -qO- "${urlMd5}")"
      exec 1>&-; exec 1>&0
      $DEBUG && >&2 echo "${md5Local} - ${md5Srv} - ${urlMd5}"
      
      if [ "${md5Local}" = "${md5Srv}" ]; then
        return 0
      else
        clientState "md5 sum wrong"
        ${zenity} --error --title "MD5 sum wrong" --text "MD5 check failed, please try again."
      fi
    fi
  fi
  rm -f "${examSquashfs}"
  return 1
}

# find all instances of this script an stop them
function killRunningInstances()
{
  MYPID=$$
  ps xao pid,pgid,ppid,cmd | awk '/\/bin\/bash \/usr\/bin\/[s]earchExamServer/{print $1" "$2" "$3}' | while read -r pid pgid ppid; do
    if [ "${MYPID}" -ne "${pid}" ] && [ "${MYPID}" -ne "${ppid}" ]; then
      cpids=$(pgrep -P ${pid})
      $DEBUG && >&2 echo "killing ${pid} ${cpids}"
      kill ${pid} ${cpids} 2>/dev/null
    fi
  done
}

function setup_chroot()
{
  mount /lib/live/mount/medium/live/filesystem.squashfs /run/initramfs/base
  mount /run/initramfs/squashfs/exam.squashfs /run/initramfs/exam
  mount -t aufs -o br=/run/initramfs/backup=rw:/run/initramfs/exam=ro:/run/initramfs/base=ro none "/run/initramfs/newroot"
}

function config_value()
{
  if [ -n "${config}" ]; then
    config="$(${wget} ${wgetOptions} -qO- "${urlConfig}")"
    retval=$?
    if [ ${retval} -ne 0 ]; then
      >&2 echo "wget failed while fetching the system config (return value: ${retval})."
      ${zenity} --error --title "Wget error" --text "wget failed while fetching the system config (return value: ${retval})."
      do_exit
    fi
  fi

  v="$(echo "${config}" | ${python} -c 'import sys, json; print json.load(sys.stdin)["config"]["'${1}'"]')"
  $DEBUG && >&2 echo "${1} is set to ${v}"
  echo "$v"
}


# start here
killRunningInstances

# allow bonjour/zeroconf
iptables -I INPUT -p udp --dport 5353 -d 224.0.0.251 -m comment --comment "searchExamServer" -j ACCEPT
iptables -I OUTPUT -p udp --dport 5353 -d 224.0.0.251 -m comment --comment "searchExamServer" -j ACCEPT

export DISPLAY=:0

# create the directory structure and cleanup
mkdir -p "/run/initramfs/"{newroot,base,exam,tmpfs,squashfs,backup/home/user}
chown user:user "/run/initramfs/backup/home/user"
#>"${examSquashfs}"
rm -f "${retoreStateFile}" 2>/dev/null

[ -r "${infoFile}" ] && . ${infoFile}

# redirect STDOUT to zenity
exec 1> >(${zenity} --progress --pulsate --no-cancel --title="Search" --text="Searching for exam server." --auto-close)

if [ -r "${configFile}" ]; then
  $DEBUG && >&2 echo "Configfile found, using ${configFile}."
  . "${configFile}"
  AVAHI="$(cat "${configFile}")"
  eth="$(ip -s route get 192.168.0.241 | perl -ne 'print $1 if /dev[\s]+([^\s]+)/')"
else
  # run avahi-browse for n seconds or until a exam server was found
  AVAHI="$(( /usr/bin/timeout ${timeout} avahi-browse -rp --no-db-lookup _http._tcp & echo $! >&3 ) 3>/tmp/pid | \
    awk -W interactive -F";" '$1=="=" && $3=="IPv4" && $4~/Glados/{print;"cat /tmp/pid" | getline p; system("kill "p);}')"
  # $8~/[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/

  # parse the output
  gladosIp="$(echo "${AVAHI}" | awk -F";" '{print $8;exit}')"
  gladosHost="$(echo "${AVAHI}" | awk -F";" '{print $7;exit}')"
  gladosPort="$(echo "${AVAHI}" | awk -F";" '{print $9;exit}')"
  eth="$(echo "${AVAHI}" | awk -F";" '{print $2;exit}')"

  if [ "$gladosPort" = "443" ]; then
    gladosProto="https"
  else
    gladosProto="http"
  fi

fi

if [ -z "$gladosIp" ] || [ -z "$gladosPort" ] || [ -z "$gladosHost" ]; then
  $DEBUG && >&2 echo "Glados host not found."
  do_exit
fi

# parse the action URLs
if [[ $AVAHI =~ actionDownload=\'([^\']+)\' ]]; then
  actionDownload="${gladosProto}://${gladosIp}:${gladosPort}/${BASH_REMATCH[1]}"
else
  $DEBUG && >&2 echo "actionDownload not found in txt field."
  do_exit
fi

if [[ $AVAHI =~ actionFinish=\'([^\']+)\' ]]; then
  actionFinish="${gladosProto}://${gladosIp}:${gladosPort}/${BASH_REMATCH[1]}"
else
  $DEBUG && >&2 echo "actionFinish not found in txt field."
  do_exit
fi

if [[ $AVAHI =~ actionNotify=\'([^\']+)\' ]]; then
  actionNotify="${gladosProto}://${gladosIp}:${gladosPort}/${BASH_REMATCH[1]}"
else
  $DEBUG && >&2 echo "actionNotify not found in txt field."
  do_exit
fi

if [[ $AVAHI =~ actionSSHKey=\'([^\']+)\' ]]; then
  actionSSHKey="${gladosProto}://${gladosIp}:${gladosPort}/${BASH_REMATCH[1]}"
else
  $DEBUG && >&2 echo "actionSSHKey not found in txt field."
  do_exit
fi

if [[ $AVAHI =~ actionMd5=\'([^\']+)\' ]]; then
  actionMd5="${gladosProto}://${gladosIp}:${gladosPort}/${BASH_REMATCH[1]}"
else
  $DEBUG && >&2 echo "actionMd5 not found in txt field."
  do_exit
fi

if [[ $AVAHI =~ actionConfig=\'([^\']+)\' ]]; then
  actionConfig="${gladosProto}://${gladosIp}:${gladosPort}/${BASH_REMATCH[1]}"
else
  $DEBUG && >&2 echo "actionConfig not found in txt field."
fi

$DEBUG && >&2 echo "Exam server found."
echo "#Exam server found."
sleep 1

# redirect STDOUT back to the console
exec 1>&-; exec 1>&0

# Ask the user to proceed
if ! ${zenity} --question --title="Continue" --text="An exam server (${gladosIp}) was found in the network (${eth}). Switch to exam mode?"; then
  do_exit
fi

# open ports in the firewall
echo "${gladosProto}://${gladosIp}:${gladosPort}" >>/etc/lernstick-firewall/url_whitelist
sed -i '$!N; /^\(.*\)\n\1$/!P; D' /etc/lernstick-firewall/url_whitelist
service lernstick-firewall reload
iptables -I INPUT -p tcp --dport 22 -s ${gladosIp} -m comment --comment "searchExamServer" -j ACCEPT
iptables -I OUTPUT -p tcp --dport ${gladosPort} -d ${gladosIp} -m comment --comment "searchExamServer" -j ACCEPT

exec 1> >(${zenity} --progress --pulsate --no-cancel --title="SSH Key" --text="Fetching SSH Key from the exam server." --auto-close)

# get the SSH key
sshKey="$(${wget} ${wgetOptions} -qO- "${actionSSHKey}")"

retval=$?
if [ ${retval} -ne 0 ]; then
  >&2 echo "wget failed while fetching the SSH key (return value: ${retval})."
  ${zenity} --error --title "Wget error" --text "wget failed while fetching the SSH key (return value: ${retval})."
  do_exit
fi

# create environment
mkdir -p "/root/.ssh"
chmod 700 "/root/.ssh"
echo "${sshKey}" >>"/root/.ssh/authorized_keys"


  # write the info file
  cat <<EOF >"${infoFile}"
    gladosIp="${gladosIp}"
    gladosHost="${gladosHost}"
    gladosPort="${gladosPort}"
    gladosProto="${gladosProto}"
    partitionSystem="$(blkid -l -L system)"
    actionDownload="${actionDownload}"
    actionFinish="${actionFinish}"
    actionNotify="${actionNotify}"
    actionMd5="${actionMd5}"
    actionConfig="${actionConfig}"
    sshKey="${sshKey}"
EOF

url="${actionDownload//\{token\}/$token}"

cat <<EOF >"/run/initramfs/init.html"
<!DOCTYPE html>
<html lang='en-US'>
    <head>
        <meta charset='UTF-8'>
        <meta name='viewport' content='width=device-width, initial-scale=1'>
        <meta http-equiv='refresh' content='0;url=${url}' />
    </head>
    <body>
    Please wait, redirecting...
    </body>
</html>
EOF

/usr/bin/firefox -createprofile "searchExamServer /tmp/searchExamServer"

exec 1>&-; exec 1>&0

/usr/bin/firefox -P "searchExamServer" -width 800 -height 310 -chrome "/run/initramfs/init.html"
