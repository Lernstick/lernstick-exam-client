#!/usr/bin/env python3

import argparse
import sys
import os
import signal
import socket
from packaging import version # version.parse()
import re
import operator
import fcntl
import locale
import subprocess
import select
import queue
import threading
import json
import shutil # shell commands like cp, ...
import shlex # quote() strings for shell command
import time # time.sleep()
import requests # requests.get()
import http as ht # http.client
from requests.adapters import HTTPAdapter, Retry
import logging

# append to the interpreter’s search path for modules
directory = "/var/lib/lernstick-exam-client/persistent/var/lib/lernstick-exam-client"
sys.path.append(directory)
import functions as helpers # 

# Constants
retoreStateFile = "/run/initramfs/restore"
urlWhitelistFiles = [
    "/etc/lernstick-firewall/url_whitelist", # for backward compatibility, todo: remove as soon as possible
    "/etc/lernstick-firewall/proxy.d/glados.conf"
]
logFile = "/var/log/searchExamServer.log"
logFileFormat = "%(asctime)s - %(levelname)s - %(funcName)s - %(message)s"
infoFile = "/run/initramfs/info"
compatFile = "/usr/share/lernstick-exam-client/compatibility.json"
lernstick_version_files = [
    '/usr/local/lernstick.html',
    '/run/live/rootfs/filesystem.squashfs/usr/local/lernstick.html'
]
actions = ['Download', 'Finish', 'Notify', 'SSHKey', 'Md5', 'Config']
glados_infos = ['gladosHost', 'gladosPort', 'gladosIp', 'gladosDesc', 'gladosProto']
variables = glados_infos + ['action'+i for i in actions]

# translations
messages = {
    "de": {
        "Search": "Suche",
        "Searching for exam server.": "Suche nach Prüfungsserver.",
        "The following list of exam servers was found in the network. Please select the one you want to use.": "Die folgende Liste von Prüfungsservern wurde im Netzwerk gefunden. Bitte wählen Sie denjenigen aus, den Sie verwenden möchten.",
        "Name": "Name",
        "IP": "IP",
        "Host": "Host",
        "Port": "Port",
        "Protocol": "Protokoll",
        "Interface": "Schnittstelle",
        "Exam server found.": "Prüfungsserver gefunden.",
        "Please wait": "Bitte warten",
        "Connecting to server.": "Verbinde zu Server",
        "Configuring firewall": "Firewall wird konfiguriert",
        "Fetching SSH key": "SSH Schüssel wird abgerufen",
        "Fetching server information": "Server Informationen werden abgerufen",
        "Checking versions": "Versionen werden überprüft",
        "Server version mismatch. Got {ver}, but client needs {wants}.": "Serverversionskonflikt: Habe {ver}, aber der Client fordert {wants}.",
        "Client version mismatch. Got {ver}, but server needs {wants}.": "Clientversionskonflikt: Habe {ver}, aber der Server fordert {wants}.",
        "Lernstick version mismatch. Got {ver}, but server needs {wants}.": "Versionskonflikt des Lernsticks: Habe {ver}, aber der Server fordert {wants}.",
        "Lernstick flavor mismatch. Got {ver}, but server needs {wants}.": "Versionskonflikt des Lernstick Flavors: Habe {ver}, aber der Server fordert {wants}.",
        "rdiff-backup version mismatch. Got {ver}, but server needs {wants}. Please update your Lernsticks and/or Glados-server such that they share the same rdiff-backup version; either both 2.x, or both 1.2.x.": "Versionskonflikt von rdiff-backup: Habe {ver}, aber der Server fordert {wants}. Bitte aktualisieren Sie Ihre Lernsticks und/oder Ihren Glados Server, sodass beide die gleiche rdiff-backup Version haben; entweder beide 2.x oder beide 1.2.x.",
        "The server does not provide information about '{v}'. Therefore, we cannot make sure that everthing will work. Please update your Glados server.": "Der Server gibt keine Information über '{v}' an. Darum kann nicht sichergestellt werden, dass alles reibungslos funktionert. Bitte aktualisieren Sie Ihren Glados Server.",
        "Setting up token request": "Tokeneingabe wird vorbereitet",
        "Exam Client": "Prüfungsclient",
        "Taking Glados server from configuration file.": "Nehme Glados Server Informationen von der Konfigurationsdatei.",
        "Continue": "Fortfahren",
        "An exam server was found in the configuration file (via {interface}):\n\n    Desciption: {gladosDesc}\n    Hostname: {gladosHost}\n    IP: {gladosIp}\n\nSwitch to exam mode?": "Ein Prüfungsserver wurde in der Konfigurationdatei gefunden (via {interface}):\n\n    Beschreibung: {gladosDesc}\n    Hostname: {gladosHost}\n    IP: {gladosIp}\n\nIn den Prüfungsmodus wechseln?",
        "Error": "Fehler",
        "Failed to fetch the SSH key from Glados server.": "Abrufen des SSH Schlüssels fehlgeschlagen.",
        "Cannot obtain current Lernstick version.": "Aktuelle Lernstick Version kann nicht ermittelt werden.",
        "Cannot open compatibility file {path}": "Kompatibilitätsdatei {path} kann nicht geöffnet werden",
        "Unable to fetch Glados server version information.": "Glados Server Informationen können nicht abgerufen werden.",
        "Variable {var} not given in configuration file {file}. Please add this variable to the configuration file.": "Die Variable {var} is nicht in der Konfigurationdatei {file}. Bitte fügen Sie die Variable zur Konfigurationdatei hinzu.",
        "The Glados server ({gladosDesc}, {gladosHost}, {gladosIp}) configured in the configuration file {file} is not reachable via your network connection(s). Aborting.": "Der Glados Server ({gladosDesc}, {gladosHost}, {gladosIp}) aus der Konfigurationdatei {file} kann nicht über eine Ihrer Netzwerkverbindungen erreicht werden. Breche ab.",
        "Choice is invalid.": "Die Wahl is ungültig.",
        "Glados host not found.": "Glados Host nicht gefunden."
    }
}

# enable timeouts and retries
class TimeoutHTTPAdapter(HTTPAdapter):
    def __init__(self, *args, **kwargs):
        self.timeout = 10
        if "timeout" in kwargs:
            self.timeout = kwargs["timeout"]
            del kwargs["timeout"]
        super().__init__(*args, **kwargs)

    def send(self, request, **kwargs):
        timeout = kwargs.get("timeout")
        if timeout is None:
            kwargs["timeout"] = self.timeout
        return super().send(request, **kwargs)

# sets up the requests library to have a timeout and a retrying functionality.
def setup_requests():
    http = requests.Session()
    adapter = TimeoutHTTPAdapter(
        timeout = 10,
        max_retries = Retry(
            total = 3,
            backoff_factor = 0.1,
            status_forcelist = [500, 502, 503, 504]
        )
    )

    # mount the adapter to schemes
    http.mount('http://', adapter)
    http.mount('https://', adapter)
    ht.client.HTTPConnection.debuglevel = 1 if args.debug else 0
    return http

# translation function
def t(string, lang = None, **kwargs):
    if lang is None: lang = args.lang

    if lang != 'en':
        if lang in messages and string in messages[lang] and messages[lang][string] != '':
            string = messages[lang][string]
        elif args.translation:
            logger.warning(f'Missing translaton for language "{lang}": "{string}"')
            if not hasattr(t, 'messages'): t.messages = {}
            if not lang in t.messages: t.messages[lang] = {}
            t.messages[lang][string] = ''

    try:
        string = string.format(**kwargs)
    except KeyError:
        pass
    return string

# Obtains a variable in key=value-format from a file
# @param string variable the name of the variable
# @param string file filename
# @return string the value or the empty string
def getVariableFromFile(variable, file):
    with open(file, "r") as fh:
        for line in fh:
            try:
                key, value = line.split("=", 1)
                if key == variable:
                    return value.strip('"\'\n ')
            except: pass            
    return ''

# Obtains all variables in key=value-format from a file
def getVariablesFromFile(file, r = {}):
    with open(file, "r") as fh:
        for line in fh:
            try:
                key, value = line.split("=", 1)
                if key != '':
                    r[key.strip('"\'\n ')] = value.strip('"\'\n ')
            except: pass
    return r

def isDeb9OrNewer():
    v = int(getVariableFromFile('VERSION_ID', '/etc/os-release'))
    return not (v != '' and v <= 8)

# @param string ver version string to compare
# @param string wants compare ver with this (eg: <=1.2.3)
def check_version(ver, wants, exit_text = None):
    r = re.search('([\>,\<,\=]+)([0-9,\.]+)', wants)
    if r:
        operator = r.group(1)
        ver2 = r.group(2)
    else:
        operator = '=='
        ver2 = wants

    ver = version.parse(ver)
    ver2 = version.parse(ver2)

    ret = (
        (operator == '==' and ver == ver2)
        or (operator == '<=' and ver <= ver2)
        or (operator == '>=' and ver >= ver2)
        or (operator == '<'  and ver <  ver2)
        or (operator == '>'  and ver >  ver2)
        or False
    )

    if ret is False and exit_text is not None:
        exit_with_error_message(exit_text.format(ver = ver, wants = wants))

    return ret

# Handles any cleanup on exit
def clean_exit(reason = None, exit_code = 0):
    if exit_code == 0:
        logger.info(f'Exiting gracefully (reason: {reason})')
    else:
        logger.error(f'Exiting gracefully (reason: {reason})')

    # revert all changes to iptables
    helpers.run('iptables-save | grep -v "searchExamServer" | iptables-restore -w')
    helpers.run('iptables-legacy-save | grep -v "searchExamServer" | iptables-legacy-restore -w')

    # remove the glados entries in firewall whitelist
    if 'glados' in globals() and 'gladosProto' in glados and 'gladosHost' in glados:
        line = '^{gladosProto}://{gladosHost}'.format(**glados)
        line = line.replace(".", "\.") if isDeb9OrNewer() else line
        for urlWhitelistFile in urlWhitelistFiles:
            remove_line_from_file(urlWhitelistFile, line)

    helpers.run('umount /run/initramfs/newroot || true')
    helpers.run('umount -l /run/initramfs/{base,exam} || true')

    if 'glados' in globals() and 'sshKey' in glados:
        remove_line_from_file('/root/.ssh/authorized_keys', glados['sshKey'])

    if isDeb9OrNewer(): helpers.run('squid -k reconfigure') # iptables stays

    if args.translation and hasattr(t, 'messages'):
        logger.warning(f"Missing translatons summary:\n{json.dumps(t.messages, indent = 4)}")

    logger.info('Script stopped')
    logger.info('-'*40)

    exit(exit_code)

def trap(signal_received, frame):
    clean_exit('signal {0} recieved'.format(signal_received), exit_code = 1)

# equivalent to PHPs file_get_contents
def file_get_contents(file):
    with open(file) as f:
        return f.read()

# equivalent to PHPs file_put_contents
def file_put_contents(file, contents, append = False):
    with open(file, 'a' if append else 'w') as f:
        return f.write(contents)

def remove_line_from_file(file, line):
    line = line.strip("\n")
    with open(file, "r") as f: lines = f.readlines()
    with open(file, "w") as f:
        for l in lines:
            if l.strip("\n") != line:
                f.write(l)

# translates \# to its hex representation
def decimals_to_hex(line):
    r = re.sub(r'\\(\d+)', lambda m: '\\x{:x}'.format(int(m.group(1))), line)
    return str.encode(r).decode('unicode_escape')

# Enqueues the stdout of a process and return a "new" readline function that takes a timeout
# @param Popen process the process object returned by subprocess.Popen()
# @return callable readline function with the following structure:
#       @param Queue q queue object to append to, when a line is read
#       @param float timeout
#       @return str|False the line or False if timed out
def enqueue_process(process):
    q = queue.Queue()
    def enqueue_output(out, queue):
        for line in iter(out.readline, b''):
            queue.put(line)
        out.close()

    def readline(timeout = 0.1):
        if timeout == 0:
            get = lambda: q.get_nowait()
        else:
            get = lambda: q.get(timeout = timeout)
        try: line = get()
        except queue.Empty: # no output yet
            return False
        else: # got line
            return line

    t = threading.Thread(target = enqueue_output, args = (process.stdout, q))
    t.daemon = True # thread dies with the program
    t.start()
    return readline

# Accepts all flags that zenity accepts as keyword arguments
def zenity(**kwargs):
    cmd = 'zenity'
    for key, value in kwargs.items():
        key = key.replace('_', '-')
        if isinstance(value, bool) and value:
            cmd += f' --{key}'
        elif isinstance(value, int):
            cmd += f' --{key}={value}'
        elif isinstance(value, str):
            cmd += f' --{key}={shlex.quote(value)}'
        elif isinstance(value, list):
            for v in value: cmd += f' --{key}={shlex.quote(v)}'
    return cmd

# exits with the message mesg, kwargs are for the zenity window
def exit_with_error_message(mesg, **kwargs):
    logger.error(mesg)
    default_args = {
        'title': t('Error'),
        'error': True,
        'width': 300,
        'text': mesg,
        'no-markup': True
    }
    kwargs = {**default_args, **kwargs} # merge the args, where the second has priority

    helpers.run(zenity(**kwargs), env = env)
    clean_exit(mesg, exit_code = 1)

# obtain the url, kwargs is for http.get()
def http_get(url, **kwargs):
    logger.debug(f"getting URL: {url}")
    try:
        r = http.get(url, **kwargs)
    except requests.exceptions.RequestException as e:  # This is the correct syntax
        logger.error(repr(e))
        r = requests.models.Response()
        r.status_code = -1
        r.code = str(e)
        r.error_type = repr(e)
    return r

# returns the version, eg: 20210213, or exits with an error message
def get_lernstick_version():
    for file in lernstick_version_files:
        try:
            with open(file) as f:
                for line in f.readlines():
                    res = re.search('([0-9,\-]{8,})', line)
                    if res:
                        return res.group(1).replace('-', '')
        except: pass

    exit_with_error_message(t('Cannot obtain current Lernstick version.'))

# return the flavor, eg: exam/standard
def get_lernstick_flavor():
    theme = '/run/live/medium/boot/grub/themes/lernstick/theme.txt'
    backup = '/usr/bin/lernstick_backup'
    if os.path.isfile(theme) and os.access(theme, os.R_OK):
        return 'exam' if re.search('title-text.*Prüfung') else 'standard'
    else:
        return 'exam' if os.path.exists(backup) else 'standard'

# eg: 1.2.8
def get_rdiff_backup_version():
    retval, output = helpers.run('rdiff-backup --version')
    v = re.search(r'[\d,\.]+', output)
    if retval and v: v = v.group(0)
    else: exit_with_error_message(t("Cannot find rdiff-backup on the system."))
    return v

# get client information
def get_client_version():
    try:
        with open(compatFile) as f:
            client_compat = json.load(f)
    except:
        exit_with_error_message(t("Cannot open compatibility file {path}", path = compatFile))

    client_compat['lernstick_version'] = get_lernstick_version()
    client_compat['lernstick_flavor'] = get_lernstick_flavor()
    client_compat['rdiff_backup_version'] = get_rdiff_backup_version()
    return client_compat

# get server information
def get_server_version():
    r = http_get(glados['actionInfo'])
    if r.status_code != 200:
        exit_with_error_message(t("Unable to fetch Glados server version information."))

    return r.json()

def get_ssh_key():
    r = http_get(glados['actionSSHKey'])
    if r.status_code != 200:
        exit_with_error_message(t("Failed to fetch the SSH key from Glados server."))

    return r.content.decode("utf-8") 

# unique all lines in file
def unique_lines(file):
    with open(file) as f:
        lines = f.readlines()
        file_put_contents(file, ''.join(set(lines)))

# p is a process created with subprocess.Popen()
def zenity_send(p, mesg):
    p.stdin.write("#{0}\n".format(mesg).encode('utf-8'))
    p.stdin.flush()

# accepts a dictionary d, that will be sanitized (only the strings)
# to use its values as shell arguments
def sanitize(d):
    r = {}
    for key in d:
        r[key] = shlex.quote(d[key]) if isinstance(d[key], str) else d[key]
    return r

if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        description = 'Search for the exam server in the network.'
    )
    parser.add_argument('-d', '--debug',
        help = 'enable debugging (prints a lot of messages to stdout).',
        default = False,
        action = "store_true"
    )
    parser.add_argument('-t', '--translation',
        help = 'print all missing tranlation messages',
        default = False,
        action = "store_true"
    )
    parser.add_argument('-l', '--lang',
        help = 'language to use, eg. en, de, es, ... (default to the system language).',
        default = locale.getdefaultlocale()[0].split('_')[0]
    )
    parser.add_argument('-c', '--configFile',
        help = 'path to the config file (default: /etc/lernstick-exam-client.conf).',
        default = '/etc/lernstick-exam-client.conf'
    )
    parser.add_argument('arg',
        nargs = '*',
        help = 'positional arguments from the NetworkManager dispatcher script (currently they are ignored)'
    )
    global args; args = parser.parse_args()

    http = setup_requests()

    # setup logging
    logger = logging.getLogger("root") # create a logger called root
    logger.setLevel(logging.DEBUG if args.debug else logging.INFO)
    ch = logging.StreamHandler() # create console handler
    fh = logging.FileHandler(logFile) # create file handler
    ch.setFormatter(helpers.TerminalColorFormatter()) # formatter of console handler
    fh.setFormatter(logging.Formatter(logFileFormat)) # set formatter of file handler
    logger.addHandler(ch) # add handlers to logger
    logger.addHandler(fh)
    logging.captureWarnings(True) # also capture warnings from other libs
    #warnings_logger = logging.getLogger("py.warnings")
    #warnings_logger.addHandler(ch) # add our handlers to the warning log facility
    #warnings_logger.addHandler(fh)
    ht.client.print = lambda *args: logger.debug("http - "+" ".join(args)) # hook the print function in http to logger.debug

    logger.info('-'*40)
    logger.info(f'Script launched with arguments: {sys.argv}')

    glados = {}
    glados_shell = {}

    env = {
        'DISPLAY': helpers.get_env("DISPLAY"),
        'XAUTHORITY': helpers.get_env("XAUTHORITY", uid = 1000),
        'LANG': helpers.get_env('LANG')
    }

    logger.debug(f'Environment variables: {json.dumps(env, indent = 4)}')

    # Exit if already running
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        s.bind(('localhost', 18493))
    except OSError:
        exit_with_error_message(t('Program is already running, exitting.'))
        #logger.error('Program is already running, exitting.')
        #sys.exit(1)

    signal.signal(signal.SIGINT, trap)
    signal.signal(signal.SIGTERM, trap)

    # allow bonjour/zeroconf
    helpers.run('iptables -I INPUT -p udp --dport 5353 -d 224.0.0.251 -m comment --comment "searchExamServer" -j ACCEPT')
    helpers.run('iptables -I OUTPUT -p udp --dport 5353 -d 224.0.0.251 -m comment --comment "searchExamServer" -j ACCEPT')

    # create the directory structure and cleanup
    for path in ['newroot','base','exam','tmpfs','squashfs','backup/home/user']:
        os.makedirs('/run/initramfs/' + path, exist_ok = True)
    os.chown('/run/initramfs/backup/home/user', 1000, 1000) # @todo evtl. shutil.chown() accepts names
    if os.path.exists(retoreStateFile): os.remove(retoreStateFile)

    if os.path.isfile(infoFile) and os.access(infoFile, os.R_OK):
        glados = getVariablesFromFile(infoFile)
        glados_shell = sanitize(glados)
        logger.debug(f'Using Glados information from previous run (file {infoFile}):\n: {json.dumps(glados, indent = 4)}')

    # if a configfile is used, don't display a selection list and use the config values instead
    if os.path.isfile(args.configFile) and os.access(args.configFile, os.R_OK):
        fixed = True

        # starting subprocess
        cmd = zenity(width = 300, progress = True, pulsate = True, no_cancel = True, auto_close = True,
            title = t('Search'),
            text = t('Taking Glados server from configuration file.')
        )
        zenity_process = subprocess.Popen(cmd, env = env, shell = True, stdin = subprocess.PIPE)

        logger.debug(f"args.configFile found, using {args.configFile}.")

        glados_config = getVariablesFromFile(args.configFile)
        for var in variables:
            if not var in glados_config or glados_config[var] == '':
                exit_with_error_message(t("Variable {var} not given in configuration file {file}. Please add this variable to the configuration file.",
                    var = var,
                    file = args.configFile
                ))
        del glados_config

        glados = getVariablesFromFile(args.configFile, glados)
        glados_shell = sanitize(glados)

        for action in actions:
            glados[f"action{action}"] = "{gladosProto}://{gladosHost}:{gladosPort}/{0}".format(glados[f"action{action}"], **glados)

        # check if there is a route to the ip addess of glados
        retval, glados['interface'] = helpers.run("ip -s route get {gladosIp} | perl -ne 'print $1 if /dev[\s]+([^\s]+)/'".format(**glados_shell))

        glados_shell = sanitize(glados)

        logger.debug(f"Using Glados information from config file {args.configFile}:\n{json.dumps(glados, indent = 4)}")

        if retval is False:
            exit_with_error_message(t("The Glados server ({gladosDesc}, {gladosHost}, {gladosIp}) configured in the configuration file {file} is not reachable via your network connection(s). Aborting.", file = args.configFile, **glados), width = 500)

        # ending subprocess
        # dont end here, end there https://github.com/Lernstick/lernstick-exam-client/blob/master/usr/bin/searchExamServer#L312
        #stdout = zenity_process.communicate(input = b'100')[0] # 

    else:
        logger.info(f'Configuration file "{args.configFile}" not present, falling back to a network scan ...')
        fixed = False
        choice = False

        while choice is False:
            logger.debug(f'Scanning the network via broadcast DNS ...')

            # show the selection list until the user has chosen one
            zenity_cmd = zenity(list = True,
                title = t('Searching for exam server.'),
                text = t('The following list of exam servers was found in the network. Please select the one you want to use.'),
                column = ['#', t('Name'), t('IP'), t('Host'), t('Port'), t('Protocol'), t('Interface')],
                hide_column = 1,
                width = 700,
                height = 220
            )
            logger.debug(f'zenity-command: "{zenity_cmd}"')
            zenity_process = subprocess.Popen(zenity_cmd,
                env = env,
                shell = True,
                stdin = subprocess.PIPE,
                stdout = subprocess.PIPE
            )
            avahi_cmd = 'avahi-browse -rp --no-db-lookup -a'
            logger.debug(f'avahi-command: "{avahi_cmd}"')
            avahi_process = subprocess.Popen(avahi_cmd,
                env = env,
                shell = True,
                stdin = subprocess.PIPE,
                stdout = subprocess.PIPE,
                bufsize = 1 # line buffered
            )

            readline = enqueue_process(avahi_process) # "improved" readline that can take a timeout argument

            n = 1
            entries = {}
            while True:
                line = readline(0.1)
                if line is False:
                    if avahi_process.poll() is not None:
                        if avahi_process.returncode == 0:
                            clean_exit('User aborted avahi')
                        else:
                            exit_with_error_message(t("avahi-browse failed with exit code {n}", n = avahi_process.returncode));
                    if zenity_process.poll() is not None: # process has ended
                        if zenity_process.returncode == 0:
                            break
                        elif zenity_process.returncode == 1:
                            clean_exit('User aborted zenity')
                        else:
                            exit_with_error_message(t("zenity failed with exit code {n}", n = zenity_process.returncode));
                else:
                    line = line.rstrip().decode("utf-8") + '\n'
                    pieces = line.split(';')
                    if len(pieces) >= 10:
                        if pieces[0] == '=' and pieces[2] == 'IPv4' and 'Glados' in pieces[9]:

                            entries[n] = {}
                            entries[n]['gladosDesc'] = decimals_to_hex(pieces[3])
                            entries[n]['gladosIp'] = pieces[7]
                            entries[n]['gladosHost'] = pieces[6]
                            entries[n]['gladosPort'] = int(pieces[8])
                            entries[n]['gladosProto'] = 'https' if pieces[4] == '_https._tcp' else 'http'
                            entries[n]['interface'] = pieces[1]

                            # parse the action URLs and skip if we miss some
                            for action in actions:
                                res = re.search(f"action{action}='([^\']+)'", pieces[9])
                                if res:
                                    entries[n][f"action{action}"] = "{gladosProto}://{gladosHost}:{gladosPort}/{0}".format(res.group(1), **entries[n])
                                else:
                                    logger.debug("Skipping invalid Glados DNS-entry for {gladosIp}:{gladosPort}".format(**entries[n]))
                                    continue

                            # get the info URL manually
                            entries[n]["actionInfo"] = entries[n]["actionSSHKey"].replace('/ticket/ssh-key', '/config/info')

                            output_line = '{0}\n{gladosDesc}\n{gladosIp}\n{gladosHost}\n{gladosPort}\n{gladosProto}\n{interface}\n'.format(n, **entries[n])

                            logger.info("Found Glados server #{0} via DNS: ip:{gladosIp}, hostname:{gladosHost}, desc:{gladosDesc}".format(n, **entries[n]))
                            output_line = decimals_to_hex(output_line)
                            zenity_process.stdin.write(str.encode(output_line))
                            zenity_process.stdin.flush()
                            n += 1

            zenity_output = zenity_process.communicate()[0].rstrip().decode("utf-8")
            choice = int(zenity_output) if zenity_output != '' else False

        if choice in entries:
            glados = {**glados, **entries[choice]} # merge the args, where the second has priority
            glados_shell = sanitize(glados)
            logger.info(f"User selected Glados server #{choice}")
            logger.info(f"Using Glados information obtained from DNS entry #{choice}")
        else:
            exit_with_error_message(t('Choice is invalid.'))

    if (not 'gladosHost' in glados) or (not 'gladosPort' in glados):
        exit_with_error_message(t('Glados host not found.'))

    # append the hostname and IP of glados to the /etc/hosts file, such that in the exam,
    # the server IP can be resolved without having a proper DNS service in the network.
    shutil.copy('/etc/hosts', '/var/lib/lernstick-exam-client/persistent/etc/hosts')
    file_put_contents('/var/lib/lernstick-exam-client/persistent/etc/hosts',
        f"{glados['gladosIp']}     {glados['gladosHost']}\n", append = True)

    logger.info("Glados server found")

    if fixed:
        # finish the processes
        stdout = zenity_process.communicate(input = b'100')[0]
        zenity_process.stdin.close()
        zenity_process.terminate()

        # Ask the user to proceed
        if not helpers.run(zenity(
                question = True,
                width = 400,
                title = t("Continue"),
                text = t("An exam server was found in the configuration file (via {interface}):\n\n    Desciption: {gladosDesc}\n    Hostname: {gladosHost}\n    IP: {gladosIp}\n\nSwitch to exam mode?", **glados_shell)
        ), env = env)[0]:
            clean_exit("User aborted before switching to exam mode.")
    else:
        zenity_process.stdin.close()
        zenity_process.terminate()
        avahi_process.stdin.close()
        avahi_process.terminate()

    logger.debug(f"Full obtained Glados information:\n{json.dumps(glados, indent = 4)}")

    # starting new zenity subprocess
    cmd = zenity(width = 300, progress = True, pulsate = True, no_cancel = True, auto_close = True,
        title = t('Please wait'),
        text = t('Connecting to server.')
    )
    zenity_process = subprocess.Popen(cmd, env = env, shell = True, stdin = subprocess.PIPE)

    zenity_send(zenity_process, t('Configuring firewall'))

    # configuring firewall
    line = '^{gladosProto}://{gladosHost}\n'.format(**glados)
    if isDeb9OrNewer(): line = line.replace(".", "\.")

    for urlWhitelistFile in urlWhitelistFiles:
        os.makedirs(os.path.dirname(urlWhitelistFile), mode = 755, exist_ok = True)
        file_put_contents(urlWhitelistFile, line, append = True)
        unique_lines(urlWhitelistFile)

    helpers.run('service lernstick-firewall restart')
    if isDeb9OrNewer(): helpers.run('squid -k reconfigure')
    helpers.run('iptables -I INPUT -p tcp --dport 22 -s {gladosIp} -m comment --comment "searchExamServer" -j ACCEPT'.format(**glados_shell))
    helpers.run('iptables -I OUTPUT -p tcp --dport {gladosPort} -d {gladosIp} -m comment --comment "searchExamServer" -j ACCEPT'.format(**glados_shell))

    # this sleep is needed, else the http request would fail (network error)
    time.sleep(1)

    logger.debug("Fetching SSH key ...")
    zenity_send(zenity_process, t('Fetching SSH key'))
    glados['sshKey'] = get_ssh_key()
    glados_shell = sanitize(glados)

    logger.debug("Fetching Client information ...")
    client = get_client_version()
    logger.debug(f"Client version information:\n{json.dumps(client, indent = 4)}")

    logger.debug("Fetching Server information ...")
    zenity_send(zenity_process, t('Fetching server information'))
    server = get_server_version()
    logger.debug(f"Server version information:\n{json.dumps(server, indent = 4)}")

    zenity_send(zenity_process, t('Checking versions'))
    logger.debug("Checking versions ...")

    for v in ['server_version', 'wants_lernstick_flavor', 'wants_lernstick_version', 'wants_client_version', 'wants_rdiff_backup_version']:
        if not v in server:
            exit_with_error_message(t("The server does not provide information about '{v}'. Therefore, we cannot make sure that everthing will work. Please update your Glados server.", v = v))

    check_version(server['server_version'], client['wants_server_version'],
        t("Server version mismatch. Got {ver}, but client needs {wants}."))
    check_version(client['lernstick_flavor'], server['wants_lernstick_flavor'],
        t("Lernstick flavor mismatch. Got {ver}, but server needs {wants}."))
    check_version(client['lernstick_version'], server['wants_lernstick_version'],
        t("Lernstick version mismatch. Got {ver}, but server needs {wants}."))
    check_version(client['client_version'], server['wants_client_version'],
        t("Client version mismatch. Got {ver}, but server needs {wants}."))
    check_version(client['rdiff_backup_version'], server['wants_rdiff_backup_version'],
        t("rdiff-backup version mismatch. Got {ver}, but server needs {wants}. Please update your Lernsticks and/or Glados-server such that they share the same rdiff-backup version; either both 2.x, or both 1.2.x."))

    logger.debug("Version check was successful!")
    zenity_send(zenity_process, t('Setting up token request'))

    # create environment
    os.makedirs('/root/.ssh', mode = 700, exist_ok = True)
    file_put_contents('/root/.ssh/authorized_keys', glados['sshKey'], append = True)
    unique_lines('/root/.ssh/authorized_keys')

    # The or fixes the newest debian9 version
    _, glados['partitionSystem'] = helpers.run("blkid -l -L system || echo /dev/sr0")
    glados_shell = sanitize(glados)

    # write the info file
    contents = ''
    for variable in variables + ['partitionSystem', 'sshKey']:
        contents += '{0}={1}\n'.format(variable, glados_shell[variable])
    file_put_contents(infoFile, contents)

    # remount /run without noexec (Debian 9 changed this, /run/initramfs/shutdown will not be executed elsewhere)
    ret, output = helpers.run("mount -n -o remount,exec /run")

    url = glados['actionDownload'].format(token = glados['token'] if 'token' in glados else '')

    # finish the zenity processes
    stdout = zenity_process.communicate(input = b'100')[0]
    zenity_process.stdin.close()
    zenity_process.terminate()

    # finally open wxbrowser
    logger.info(f"Opening URL {url} in wxbrowser")
    cmd = 'sudo -u user /usr/bin/wxbrowser {debug} --geometry "800x310" -c -n "{title}" -i "/usr/share/icons/oxygen/base/128x128/actions/system-search.png" "{url}"'.format(
        debug = '-v' if args.debug else '',
        title = t("Exam Client"),
        url = shlex.quote(url)
    )
    ret, output = helpers.run(cmd, env = env)

    if ret:
        clean_exit('Reached end.')
    else:
        exit_with_error_message(t('Failed to open token prompt.'))
