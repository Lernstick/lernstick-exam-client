#!/usr/bin/env python3

import sys # sys.argv
import wx # wx.App(), wx.Frame()
import wx.html2 # wx.html2.WebView
import re # re.comple(), re.match()
import argparse # argparse.ArgumentParser()
import os # os.system()

def geometry(arg):
    regex = re.compile(r"^[0-9]+x[0-9]+$")
    if not regex.match(arg):
        raise argparse.ArgumentTypeError
    return tuple(map(int, arg.split('x')))

_print = lambda *args, **kwargs: print("wxbrowser:", *args, **kwargs)

class Window(wx.Frame):
    # derives a new class from Frame
    def __init__(self, *args, **kwds):
        wx.Frame.__init__(self, *args, **kwds)
        self.childs = []
        self.browser = wx.html2.WebView.New(self)
        self.browser.Bind(wx.html2.EVT_WEBVIEW_LOADED, self.onLoaded)
        self.browser.Bind(wx.html2.EVT_WEBVIEW_NAVIGATING, self.onClicked) # may be stopped by Veto()
        self.browser.Bind(wx.html2.EVT_WEBVIEW_NAVIGATED, self.onRequested) # may not be stopped
        self.browser.Bind(wx.html2.EVT_WEBVIEW_NEWWINDOW, self.onNewWindow)
        self.browser.Bind(wx.html2.EVT_WEBVIEW_ERROR, self.onError)

    def Load(self):
        self.tries = 0
        if self.args.verbose: _print(f"waiting initial delay of {self.args.retry_delays[0]} sec")
        wx.CallLater(self.args.retry_delays[0]*1000, lambda: self.browser.LoadURL(self.args.url))
        if self.args.icon: self.SetIcon(wx.Icon(self.args.icon))
        if self.args.fullscreen: self.ShowFullScreen(True)
        if self.args.geometry is not None: self.resize(self.args.geometry, self.args.center)
        if self.args.center: self.CentreOnScreen()

    def onLoaded(self, event):
        if self.args.verbose: _print("loaded", event.URL)
        self.SetTitle(self.browser.GetCurrentTitle())

    def onError(self, event):
        if self.args.verbose: _print("error loading{0}".format(f" (retry {self.tries}/{self.args.retries})" if self.tries > 0 else ""), event.URL)
        self.tries += 1
        if self.tries <= self.args.retries or self.args.retries == -1:
            wx.CallAfter(lambda: self.retry())
        else:
            if self.args.verbose: _print("giving up on", event.URL)
            self.tries = 0

    def retry(self):
        delay = self.args.retry_delays[self.tries] if self.tries < len(self.args.retry_delays) else self.args.retry_delays[-1]
        if self.args.verbose: _print(f"retrying in {delay} sec")
        wx.CallLater(delay*1000, lambda: self.browser.LoadURL(self.args.url))

    def resize(self, geometry, center):
        width, height = geometry[0], geometry[1]
        if center:
            dx, dy = wx.DisplaySize()
            x = int((dx - width)/2)
            y = int((dy - height)/2)
            self.SetSize(x, y, width, height)
        else:
            self.SetSize(width, height)
        if self.args.verbose: _print("resizing window to {0}x{1})".format(width, height))

    def onClicked(self, event):
        if self.args.verbose: _print("clicked", event.URL)
        try:
            url, anchor = event.URL.split("#", 1)
            if self.args.verbose: _print("anchor", anchor)
            try:
                proto, data = anchor.split(":", 1)
                if self.args.verbose: _print("proto", proto)
                if proto == "wxbrowser":
                    try: action, arg = data.split(":", 1)
                    except ValueError: action, arg = data, None
                    self.callAction(action, arg)
                    event.Veto() # prevent actual navigation
            except ValueError: pass
        except ValueError: pass

    def callAction(self, action, arg):
        if action == 'resize':
            self.args.geometry = geometry(arg)
            self.resize(self.args.geometry, self.args.center)
        elif action == 'close':
            if self.args.verbose: _print("closing window")
            return exit() # exits immediately, self.Close() or self.Destroy() are waiting for an event to process
        elif action == 'shutdown':
            if self.args.verbose: _print("shutting down")
            os.system("/sbin/shutdown now -h")
        else:
            if self.args.verbose: _print("action {0} not found".format(action))

    def onRequested(self, event):
        if self.args.verbose: _print("requested", event.URL)

    def onNewWindow(self, event):
        if self.args.verbose: _print("newwindow", event.URL)
        window = Window(None, -1)
        window.args = self.args
        window.args.geometry = self.args.new_window_geometry
        window.args.url = event.URL
        window.Load()
        window.Show()
        self.childs.append(window)

if __name__ == '__main__':
    # parse the command line arguments
    parser = argparse.ArgumentParser(description="a simple lighweight browser using wxPython")
    parser.add_argument("url", help="the url to show in the browser window.")
    parser.add_argument("--verbose", "-v", help="verbose output", action="store_true")
    parser.add_argument("--icon", "-i", help="the icon", metavar='PATH')
    parser.add_argument("--name", "-n", help="the name of the executable to be shown in the dash or taskbar", default=sys.argv[0])
    parser.add_argument("--center", "-c", help="centres the window on screen", action="store_true")
    parser.add_argument("--new-window-geometry", "-ng", help="the width and height in pixels of a new window", type=geometry, metavar='WIDTHxHEIGHT', default='800x600')
    parser.add_argument("--retries", "-r", help="number of retries on fail, (set -1 for infinite retries)", type=int, default=0)
    parser.add_argument("--retry-delays", "-d", help="delay for each retries in sec (index 0 is for the delay of the initial request), default is 0 3 3 ...", type=int, nargs='+', dest='retry_delays', default=[0, 3])
    arg_group = parser.add_mutually_exclusive_group()
    arg_group.add_argument("--geometry", "-g", help="the width and height in pixels", type=geometry, metavar='WIDTHxHEIGHT')
    arg_group.add_argument("--fullscreen", "-f", help="show the window in fullscreen", action="store_true")
    args = parser.parse_args()

    # set the executable name
    sys.argv[0] = args.name

    app = wx.App(False)
    window = Window(None, -1)
    window.args = args
    window.Load()
    window.Show()
    app.MainLoop()
