#!/usr/bin/env python3

import sys # sys.argv
import wx # wx.App(), wx.Frame()
import wx.html2 # wx.html2.WebView
import re # re.comple(), re.match()
import argparse # argparse.ArgumentParser()
import os # os.system()
import json # dumps() quote strings into a javascript literal
import logging

# append to the interpreterâ€™s search path for modules
directories = [
    "/var/lib/lernstick-exam-client/",
    "/var/lib/lernstick-exam-client/persistent/var/lib/lernstick-exam-client/"
]
sys.path.extend(directories)
import functions as helpers # get_config(), get_info(), get_env(), run()

# the javascript code-piece that is executed when the script ended
js_triggerEvent = "$(document).trigger('wxbrowser:script', [{0}]);"

def geometry(arg):
    regex = re.compile(r"^[0-9]+x[0-9]+$")
    if not regex.match(arg):
        raise argparse.ArgumentTypeError
    return tuple(map(int, arg.split('x')))

_print = lambda *args, **kwargs: print("wxbrowser:", *args, **kwargs)

class Window(wx.Frame):
    # derives a new class from Frame
    def __init__(self, *pargs, **kwargs):
        wx.Frame.__init__(self, *pargs, **kwargs)
        self.childs = []
        self.browser = wx.html2.WebView.New(self)
        self.browser.Bind(wx.html2.EVT_WEBVIEW_LOADED, self.onLoaded)
        self.browser.Bind(wx.html2.EVT_WEBVIEW_NAVIGATING, self.onClicked) # may be stopped by Veto()
        self.browser.Bind(wx.html2.EVT_WEBVIEW_NAVIGATED, self.onRequested) # may not be stopped
        self.browser.Bind(wx.html2.EVT_WEBVIEW_NEWWINDOW, self.onNewWindow)
        self.browser.Bind(wx.html2.EVT_WEBVIEW_ERROR, self.onError)
        if args.script != None:
            self.timer = wx.Timer(self)
            self.Bind(wx.EVT_TIMER, self.onIntervalTimer, self.timer)
            self.timer.Start(int(args.script[1])*1000) # every 0.1 second

    def Load(self):
        self.tries = 0
        logger.debug(f"waiting initial delay of {args.retry_delays[0]} sec")
        wx.CallLater(args.retry_delays[0]*1000, lambda: self.browser.LoadURL(args.url))
        if args.icon: self.SetIcon(wx.Icon(args.icon))
        if args.fullscreen: self.ShowFullScreen(True)
        if args.geometry is not None: self.resize(args.geometry, args.center)
        if args.center: self.CentreOnScreen()

    def onLoaded(self, event):
        logger.debug(f"loaded {event.URL}")
        self.SetTitle(self.browser.GetCurrentTitle())

    def onError(self, event):
        logger.error("error loading{0} {1}".format(f" (retry {self.tries}/{args.retries})" if self.tries > 0 else "", event.URL))
        self.tries += 1
        if self.tries <= args.retries or args.retries == -1:
            wx.CallAfter(lambda: self.retry())
        else:
            logger.debug(f"giving up on {event.URL}")
            self.tries = 0

    def retry(self):
        delay = args.retry_delays[self.tries] if self.tries < len(args.retry_delays) else args.retry_delays[-1]
        logger.debug(f"retrying in {delay} sec")
        wx.CallLater(delay*1000, lambda: self.browser.LoadURL(args.url))

    def resize(self, geometry, center):
        width, height = geometry[0], geometry[1]
        if center:
            dx, dy = wx.DisplaySize()
            x = int((dx - width)/2)
            y = int((dy - height)/2)
            self.SetSize(x, y, width, height)
        else:
            self.SetSize(width, height)
        logger.debug("resizing window to {0}x{1})".format(width, height))

    def onClicked(self, event):
        logger.debug(f"clicked {event.URL}")
        try:
            url, anchor = event.URL.split("#", 1)
            logger.debug(f"anchor {anchor}")
            try:
                proto, data = anchor.split(":", 1)
                logger.debug(f"proto {proto}")
                if proto == "wxbrowser":
                    try: action, arg = data.split(":", 1)
                    except ValueError: action, arg = data, None
                    self.callAction(action, arg)
                    event.Veto() # prevent actual navigation
            except ValueError: pass
        except ValueError: pass

    def callAction(self, action, arg):
        if action == 'resize':
            args.geometry = geometry(arg)
            self.resize(args.geometry, args.center)
        elif action == 'close':
            logger.debug("closing window")
            return exit() # exits immediately, self.Close() or self.Destroy() are waiting for an event to process
        elif action == 'shutdown':
            logger.debug("shutting down")
            os.system("/sbin/shutdown now -h")
        else:
            logger.warning("action {0} not found".format(action))

    def onRequested(self, event):
        logger.debug(f"requested {event.URL}")

    def onNewWindow(self, event):
        logger.debug(f"newwindow {event.URL}")
        window = Window(None, -1)
        window.args = args
        window.args.geometry = args.new_window_geometry
        window.args.url = event.URL
        window.Load()
        window.Show()
        self.childs.append(window)

    # The interval ticker for the script
    # @param Window self current object instance
    # @param wx.CommandEvent event
    # @return the return value of the script
    def onIntervalTimer(self, event):
        retval, output = helpers.run(args.script[0], env = os.environ)
        logger.debug("script {0} executed: exit code {1}".format(args.script[0], retval))
        exec_js = js_triggerEvent.format(json.dumps(output) if retval else 'false')
        if retval == False: logger.error(f"script failed: {output}")
        logger.debug("executing javascript: {0}".formart((exec_js[:75] + ' ...') if len(exec_js) > 75 else exec_js))
        self.browser.RunScript(exec_js)
        return retval

if __name__ == '__main__':
    # parse the command line arguments
    parser = argparse.ArgumentParser(description="a simple lighweight browser using wxPython")
    parser.add_argument("url", help="the url to show in the browser window.")
    parser.add_argument("--verbose", "-v", help="verbose output", action="store_true")
    parser.add_argument("--icon", "-i", help="the icon", metavar='PATH')
    parser.add_argument("--name", "-n", help="the name of the executable to be shown in the dash or taskbar", default=sys.argv[0])
    parser.add_argument("--class", help="the name of the executable to be shown in the dash or taskbar", dest="wm_class", default=sys.argv[0])
    parser.add_argument("--center", "-c", help="centres the window on screen", action="store_true")
    parser.add_argument("--new-window-geometry", "-ng", help="the width and height in pixels of a new window", type=geometry, metavar='WIDTHxHEIGHT', default='800x600')
    parser.add_argument("--retries", "-r", help="number of retries on fail, (set -1 for infinite retries)", type=int, default=0)
    parser.add_argument("--retry-delays", "-d", help="delay for each retries in sec (index 0 is for the delay of the initial request), default is 0 3 3 ...", type=int, nargs='+', dest='retry_delays', default=[0, 3])
    parser.add_argument("--script", "-s", nargs=2, help='run a script in the background and feed its output as an event "wxbrowser:script" into the javascript of the running page. Listen to this event by $(document).on("wxbrowser:script", function(e, json) {...}, where json contains the output as a string.', metavar='PATH INTERVAL')
    arg_group = parser.add_mutually_exclusive_group()
    arg_group.add_argument("--geometry", "-g", help="the width and height in pixels", type=geometry, metavar='WIDTHxHEIGHT')
    arg_group.add_argument("--fullscreen", "-f", help="show the window in fullscreen", action="store_true")
    global args; args = parser.parse_args()

    logger = logging.getLogger("root") # create a logger called root
    logger.setLevel(logging.DEBUG if args.verbose else logging.INFO)
    ch = logging.StreamHandler() # create console handler
    ch.setFormatter(helpers.TerminalColorFormatter()) # formatter of console handler
    logger.addHandler(ch) # add handlers to logger
    logging.captureWarnings(True) # also capture warnings from other libs

    logger.debug(f'Script launched with arguments: {sys.argv}')

    # set the WM_CLASS name
    sys.argv[0] = args.wm_class

    app = wx.App(False)
    window = Window(None, -1)
    window.args = args
    window.Load()
    window.Show()
    app.MainLoop()
