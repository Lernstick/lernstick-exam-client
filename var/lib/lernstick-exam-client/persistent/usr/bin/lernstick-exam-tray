#!/usr/bin/env python3

import wx # wx.App, wx.Frame, wx.Menu, wx.MenuItem, wx.Timer, wx.Icon
import wx.adv # wx.adv.TaskBarIcon, wx.adv.NotificationMessage
import signal # signal.signal(), signal.SIGUSR1
import sys # sys.path, sys.stderr
import os # os.environ
import time # time.time()
import collections # collections.deque()
from datetime import datetime # datetime.strptime(), datetime.fromtimestamp()
import requests # requests.get()
import http # http.client
import subprocess # subprocess.Popen()
import locale
import logging

# append to the interpreter‚Äôs search path for modules
directory = "/var/lib/lernstick-exam-client/"
sys.path.append(directory)
import functions as helpers # get_config(), get_info(), get_env(), run()

TRAY_TOOLTIP = 'lernstick-exam-tray'
TRAY_ICON_OK = '/var/lib/lernstick-exam-client/ok.png'
TRAY_ICON_ERROR = '/var/lib/lernstick-exam-client/error.png'
TRAY_ICON_WAIT = '/var/lib/lernstick-exam-client/wait.png'
TICK_INTERVAL = 60 # in seconds
NOTIFY_URL = 'actionNotify'
SIGNAL_FILE = '/tmp/lernstick-exam-tray'
DEBUG = True

# translations
messages = {
    'de': {
        'Status:': 'Status:',
        '‚úîÔ∏è The system is online (last checked {n} minutes ago).': '‚úîÔ∏è Das System ist online (letzter Check vor {n} Minuten).',
        '‚ùå The system is not online (last time was {n} minutes ago).': '‚ùå Das System ist nicht online (letztes Mal war vor {n} Minuten).',
        '{sign} There was no backup since the system has started ({n} minutes ago).': '{sign} Kein Backup seit das System gestartet wurde (vor {n} Minuten).',
        '{sign} The last successfull backup was at {date:%H:%M:%S} ({n} minutes ago).': '{sign} Das letzte erfolgreiche Backup war um {date:%H:%M:%S} (vor {n} Minuten).',
        'History:': 'Verlauf:',
        'üîÑ Update status now': 'üîÑ Status jetzt aktualisieren',
        '‚ùî Show exam info': '‚ùî Pr√ºfungsinformation anzeigen',
        '‚ÄºÔ∏è Hand-in exam': '‚ÄºÔ∏è Pr√ºfung abgeben',
        'Manual check: Everything seems fine.': 'Manueller Check: Alles sieht gut aus.',
        'The current backup has failed. Please contact your supervisor.': 'Das aktuelle Backup hat fehlgeschlagen. Bitte wenden Sie sich an Ihre Pr√ºfungsaufsicht.',
        'Backup successfull': 'Backup erfolgreich',
        'A manual restore has failed. Please contact your supervisor.': 'Eine manuelle Wiederherstellung hat fehlgeschlagen. Bitte wenden Sie sich an Ihre Pr√ºfungsaufsicht.',
        'Manual restore successfull.': 'Manuelle Wiederherstellung erfolgreich.',
        'There was no backup since the system has started. Please contact your supervisor.': 'Kein Backup seit das System gestartet wurde. Bitte wenden Sie sich an Ihre Pr√ºfungsaufsicht.',
        'There was no backup since {0} minutes. Please contact your supervisor.': 'Kein Backup seit {0} Minuten. Bitte wenden Sie sich an Ihre Pr√ºfungsaufsicht.',
        'The network connection could not be established': 'Die Netzwerkverbindung konnte nicht hergestellt werden',
        'The GLaDOS-server is not reachable. Please contact your supervisor.': 'Der GLaDOS-server ist nicht erreichbar. Bitte wenden Sie sich an Ihre Pr√ºfungsaufsicht.',
        'Error': 'Fehler',
        'Info': 'Info'
    }
}

# the language code
lang = locale.getdefaultlocale()[0].split('_')[0] # eg: de, en, es, ...

def _(string, lang = lang):
    if lang in messages and string in messages[lang]:
        return messages[lang][string]
    else:
        return string

# @return int timestamp in milliseconds
def timestamp_ms():
    return round(time.time() * 1000)

def sigusr1_handler(signal, frame):
    logger.debug("SIGUSR1 caught")
    try: f = open(SIGNAL_FILE, 'r') 
    except OSError: app.tray.onSignal(0, -2, 'no signal file')
    with f:
        try: timestamp, code, msg = list(f)[-1].split(':', 2)
        except ValueError: timestamp, code, msg = 0, -1, list(f)[-1]
        app.tray.onSignal(int(timestamp), int(code), msg.strip())

# @return int time since last successful backup in ms or 0 if it cannot be found out
def get_last_successful_backup():
    try: f = open(SIGNAL_FILE, 'r') 
    except OSError: return 0
    with f:
        for line in reversed(f.readlines()):
            try: timestamp, code, msg = line.split(':', 2)
            except ValueError: timestamp, code, msg = 0, -1, line
            if int(code) == TaskBarIcon.BACKUP_SUCCESSFUL:
                return int(timestamp)
    return 0

def create_menu_item(menu, label, func):
    item = wx.MenuItem(menu, -1, label)
    menu.Bind(wx.EVT_MENU, func, id=item.GetId())
    menu.Append(item)
    return item

class TaskBarIcon(wx.adv.TaskBarIcon):

    BACKUP_STARTED = 1
    BACKUP_FAILED = 2
    BACKUP_SUCCESSFUL = 3
    RESTORE_STARTED = 4
    RESTORE_FAILED = 5
    RESTORE_SUCCESSFUL = 6

    # constructor
    # @param TaskBarIcon self current object instance
    # @param wx.Frame frame
    def __init__(self, frame):
        self.frame = frame
        self.last_successful_backup = get_last_successful_backup()
        self.started = timestamp_ms()
        # timestamp in ms of when the exam has started (last login)
        self.exam_started = datetime.strptime(helpers.run("last --time-format iso user | head -n1 | awk '{print $4}'")[1], '%Y-%m-%dT%H:%M:%S%z').timestamp()*1000 # in ms
        self.last_online = self.exam_started
        self.backup_interval = helpers.get_config('backup_interval', 300)*1000 # in ms
        self.backup_tolerance = self.backup_interval + 60*1000 # + 1min
        self.token = helpers.get_info('token')
        self.ping_url = helpers.get_info(NOTIFY_URL)
        self.ping_url = self.ping_url.format(token = self.token, state = 'Ping recieved')

        self.state = {
            'BACKUP_OK':  True, # because the check sets it to False only
            'NETWORK_OK': False,
        }

        self.log = collections.deque([], 10) # queue of max 10 items
        super(TaskBarIcon, self).__init__()
        self.Bind(wx.adv.EVT_TASKBAR_RIGHT_DOWN, self.onRightClick)
        self.Bind(wx.adv.EVT_TASKBAR_LEFT_DOWN, self.onClick)

        self.timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.onIntervalTimer, self.timer)
        self.SetIcon(wx.Icon(TRAY_ICON_WAIT), TRAY_TOOLTIP) # set the wait icon
        #self.onIntervalTimer(wx.EVT_TIMER) # run all checks at startup
        self.timer.Start(TICK_INTERVAL*1000) # start timer after a delay of 1min

        self.signal_timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.onSignalTimer, self.signal_timer)
        self.signal_timer.Start(100) # every 0.1 second

    # Creates the popup menu
    # @param TaskBarIcon self current object instance
    # @return wx.Menu the menu object
    def CreatePopupMenu(self):
        menu = wx.Menu()

        item = create_menu_item(menu, _('Status:'), self.noop)
        item.Enable(False)

        if self.state['NETWORK_OK']:
            label = _('‚úîÔ∏è The system is online (last checked {n} minutes ago).').format(
                n = int((timestamp_ms() - self.last_online)/60000)
            )
        else:
            label = _('‚ùå The system is not online (last time was {n} minutes ago).').format(
                n = int((timestamp_ms() - self.last_online)/60000)
            )
        item = create_menu_item(menu, label, self.noop)
        item.Enable(False)

        lsb = get_last_successful_backup()
        sign = '‚úîÔ∏è' if self.state['BACKUP_OK'] else '‚ùå'
        if lsb == 0:
            label = _('{sign} There was no backup since the system has started ({n} minutes ago).').format(
                sign = sign,
                n = int((timestamp_ms() - self.exam_started)/60000)
            )
        else:
            label = _('{sign} The last successfull backup was at {date:%H:%M:%S} ({n} minutes ago).').format(
                sign = sign,
                date = datetime.fromtimestamp(int(lsb/1000)),
                n = int((timestamp_ms() - lsb)/60000)
            )
        item = create_menu_item(menu, label, self.noop)
        item.Enable(False)

        menu.AppendSeparator()

        item = create_menu_item(menu, _('History:'), self.noop)
        item.Enable(False)

        for n in self.log:
            msg = '‚óè {date:%H:%M:%S} - {type}: {msg}'.format(
                date = datetime.fromtimestamp(int(n['timestamp']/1000)),
                type = n['type'].capitalize(),
                msg = n['message']
            )
            item = create_menu_item(menu, msg, self.noop)
            item.Enable(False)

        menu.AppendSeparator()
        create_menu_item(menu, _('üîÑ Update status now'), self.onClickUpdate)
        create_menu_item(menu, _('‚ùî Show exam info'), self.onClickInfo)
        create_menu_item(menu, _('‚ÄºÔ∏è Hand-in exam'), self.onClickHandIn)
        return menu

    # Creates the popup menu
    # @param TaskBarIcon self current object instance
    # @param wx.CommandEvent event
    def onClickUpdate(self, event):
        if self.onIntervalTimer(event):
            self.systemNotification('info', _('Manual check: Everything seems fine.'))

    # Opens the show_info window
    # @param TaskBarIcon self current object instance
    # @param wx.CommandEvent event
    def onClickInfo(self, event):
        subprocess.Popen(["show_info"],
            env = os.environ,
            start_new_session = True
        )

    # Opens the finishExam window
    # @param TaskBarIcon self current object instance
    # @param wx.CommandEvent event
    def onClickHandIn(self, event):
        subprocess.Popen(["finishExam"],
            env = os.environ,
            start_new_session = True
        )

    # The interval ticker
    # @param TaskBarIcon self current object instance
    # @param wx.CommandEvent event
    # @return bool whether network and backup are ok or not
    def onIntervalTimer(self, event):
        logging.debug("interval timer ticked")
        network = self.notifyNetwork()
        backup = self.notifyBackup()
        self.updateIcon()
        return network and backup

    def onSignalTimer(self, event):
        return

    def noop(self, event):
        return

    # The signal event
    # @param TaskBarIcon self current object instance
    # @param int timestamp
    # @param int error code
    # @param string msg debug message
    def onSignal(self, timestamp, code, msg):
        logging.debug(f"code: {code}")
        logging.debug(f"timestamp: {timestamp}")
        logging.debug(f"msg: {msg}")

        if code == self.BACKUP_FAILED:
            self.systemNotification('error', _('The current backup has failed. Please contact your supervisor.'))
            self.state['BACKUP_OK'] = False
        elif code == self.BACKUP_SUCCESSFUL:
            self.last_successful_backup = timestamp_ms()
            self.state['BACKUP_OK'] = True
            self.log.appendleft({
                'timestamp': self.last_successful_backup,
                'type': 'info',
                'message': _('Backup successfull'),
                'obj': None
            })
        elif code == self.RESTORE_FAILED:
            self.systemNotification('error', _('A manual restore has failed. Please contact your supervisor.'))
        elif code == self.RESTORE_SUCCESSFUL:
            self.systemNotification('info', _('Manual restore successfull.'))
        self.updateIcon()

    # Send a notification to the user.
    # @param TaskBarIcon self current object instance
    # @param string severity can be error or info
    # @param string message the message
    def systemNotification(self, severity, message):
        # ICON_WARNING, ICON_ERROR, ICON_INFORMATION
        icon = wx.ICON_ERROR if severity == 'error' else wx.ICON_INFORMATION
        title = _('Error') if severity == 'error' else _('Info')
        notification = wx.adv.NotificationMessage(title,
            message = message,
            flags = icon)
        self.log.appendleft({
            'timestamp': timestamp_ms(),
            'type': severity,
            'message': message,
            'obj': notification
        })
        if notification.Show(timeout = 10) == False:
            logger.info("TODO: fallback notification")

    def onClick(self, event):
        logger.info("Tray icon was clicked.")
        self.PopupMenu(self.CreatePopupMenu())

    def onRightClick(self, event):
        logger.info("Tray icon was right-clicked.")

    def notifyBackup(self):
        since_started = abs(timestamp_ms() - self.exam_started)
        since_backup  = abs(timestamp_ms() - self.last_successful_backup)
        if self.last_successful_backup == 0 and since_started > self.backup_tolerance:
            msg = _('There was no backup since the system has started. Please contact your supervisor.')
            self.systemNotification('error', msg)
            self.state['BACKUP_OK'] = False
            return False
        elif self.last_successful_backup != 0 and since_backup > self.backup_tolerance:
            n = int((timestamp_ms() - self.last_successful_backup)/60000)
            msg = _('There was no backup since {0} minutes. Please contact your supervisor.')
            self.systemNotification('error', msg.format(n))
            self.state['BACKUP_OK'] = False
            return False
        return True

    def notifyNetwork(self):
        try: r = requests.get(self.ping_url, timeout=10)
        except:
            msg = _('The network connection could not be established')
            self.systemNotification('error', msg)
            self.state['NETWORK_OK'] = False
            return False

        if r.status_code == 200:
            self.last_online = timestamp_ms()
            self.state['NETWORK_OK'] = True
            return True
        else:
            msg = _('The GLaDOS-server is not reachable. Please contact your supervisor.')
            self.systemNotification('error', msg)
            self.state['NETWORK_OK'] = False
            return False

    def isError(self):
        return not all(self.state.values())

    def updateIcon(self):
        icon = TRAY_ICON_ERROR if self.isError() else TRAY_ICON_OK
        self.SetIcon(wx.Icon(icon), TRAY_TOOLTIP)

    def notifyAgent(self):
        return False

    def exit(self, event):
        wx.CallAfter(self.Destroy)
        self.frame.Close()

class App(wx.App):
    def OnInit(self):
        frame = wx.Frame(None)
        self.SetTopWindow(frame)
        self.tray = TaskBarIcon(frame)
        return True


if __name__ == '__main__':

    # setup logging
    logger = logging.getLogger("root") # create a logger called root
    logger.setLevel(logging.DEBUG if DEBUG else logging.INFO)
    ch = logging.StreamHandler() # create console handler
    ch.setFormatter(helpers.TerminalColorFormatter()) # formatter of console handler
    logger.addHandler(ch) # add handlers to logger
    logging.captureWarnings(True) # also capture warnings from other libs
    http.client.HTTPConnection.debuglevel = 1 if DEBUG else 0
    http.client.print = lambda *args: logger.debug("http - "+" ".join(args)) # hook the print function in http to logger.debug

    # check the environment variables
    if not ('DISPLAY' in os.environ and 'XAUTHORITY' in os.environ and 'DBUS_SESSION_BUS_ADDRESS' in os.environ):
        logger.error('DISPLAY, XAUTHORITY and DBUS_SESSION_BUS_ADDRESS have to be available.')
        exit(1)

    app = App(False)

    # register the signal handler
    signal.signal(signal.SIGUSR1,sigusr1_handler)

    # staet the application
    app.MainLoop()
