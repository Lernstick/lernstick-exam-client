#!/usr/bin/env python3

import sys # sys.path.append()
import os # os.path.isfile(), os.access(), os.R_OK, os.makedirs()
import subprocess # subprocess.Popen(), subprocess.PIPE, subprocess.STDOUT
import time # time.time()

# append to the interpreterâ€™s search path for modules
directory = "/var/lib/lernstick-exam-client/"
sys.path.append(directory)
import functions as helpers # get_config(), get_env(), run()

VERBOSE = True
DEBUG = False
keymap = helpers.get_config("keylogger_keymap", "en_US")
path = helpers.get_config("keylogger_path", "/home/user/.Keylogger")
chunk = 10 # seconds
dir_mode = 0o700 # 0o makes the number octal
date = int(time.time()) # seconds timestamp

def to_file (line, path = path):
    global date
    ms = int(round(time.time() * 1000)) # timestamp in microseconds
    now = int(time.time()) # timestamp in seconds
    expire = date + chunk
    if now > expire: date = now
    if DEBUG: print("{ms} {line}".format(ms = ms, line = line))
    with open("{0}/keylogger{1}.key".format(path, date), "a") as file:
        file.write("{ms} {line}\n".format(ms = ms, line = line))

# find the keymap file from the currently running Xorg process
if keymap == "auto":
    retval, pid = helpers.run("pgrep Xorg")
    if retval:
        lang = helpers.get_env("LANG", pid)
        keymap = lang.split(".", 1)[0] # "en_US.UTF-8" to "en_US"
    else:
        exit(1) # fail if the keymap cannot be determined

# fall back if keymap does not exist
file = "/usr/share/logkeys/keymaps/{0}.map".format(keymap)
if os.path.isfile(file) and os.access(file, os.R_OK):
    arg = "--keymap {0}".format(file)
else:
    arg = "--us-keymap" # default keymap
    
try: os.makedirs(path) and os.chmod(path, dir_mode)
except: pass

p = subprocess.Popen("logkeys --start --no-daemon --no-timestamps {0} -o -".format(arg),
    stdout = subprocess.PIPE,
    stderr = subprocess.STDOUT,
    shell = True)

concat, string = False, ""
while True:
    char = p.stdout.read(1)
    if not char: exit(1)
    char = char.decode('utf-8')
    if char == "\n": continue
    # outputs enclosed in square brackets like <enter> should be on one line
    if char == "<": concat = True

    if concat:
        string += char
    else:
        to_file(char)

    if char == ">":
        concat = False
        to_file(string)
        string = ""
