#!/usr/bin/env python3

import sys # sys.argv
import time # time.sleep()
import requests # requests.get()
import http # http.client
import json # json.load()
import fnmatch # to make machtes "foo/*" == "foo/bar"
import subprocess # subprocess.Popen(), subprocess.check_output()
from types import SimpleNamespace # json to python object
import logging

# append to the interpreterâ€™s search path for modules
directory = "/var/lib/lernstick-exam-client/"
sys.path.append(directory)
import functions as helpers # TerminalColorFormatter, helpers.FileFormatter

CONFIG_FILE = '/etc/lernstick-exam-client/agent.json'
LOG_FILE = '/var/log/lernstick-exam-agent.log'
INFO_FILE = '/info'
INFO_FILE_URL = 'actionConfig'
LOG_LEVEL = logging.INFO
retry = 5000

def get_info(variable, file = INFO_FILE):
    cmd = 'set -a; source "{file}"; set +a; printf "%s" "${variable}"'.format(file = INFO_FILE, variable = variable)
    string = subprocess.check_output(['bash', '-c', cmd]).decode(sys.stdout.encoding)
    return string if string != "" else False

def truncate(string, at = 27, suffix = '...'):
    return (string[:at] + suffix) if len(string) > at else string

class Event:
    id = "None";
    event = "None";
    data = "None";
    retry = 5000;
    command = "None";

    def __init__(self, event):
        self.event = event

    def trigger(self):
        logger.info('triggered event "{evt:s}" (id: {id:s}) with data "{data:s}"" => executing command "{cmd:s}"'.format(
            evt = self.event,
            id = self.id,
            data = truncate(self.dataToJSON()),
            cmd = truncate(self.command)
        ))

        env = {
            "ENV_id": str(self.id),
            "ENV_event": str(self.event),
            "ENV_data": self.dataToJSON()
        }

        logger.debug('trigger(): spawning process "{command:s}" with environment "{env:s}"'.format(
            command = self.command,
            env = str(env)
        ))

        # runs the processes in the background
        self.process = subprocess.Popen(["sh", "-c", self.command],
            env = env
        )
        #helpers.run(self.command, env = env) # does not work in the background!

    def isInConfig(self):
        if hasattr(config, 'listen'):
            for item in config.listen:
                logger.debug('isInConfig(): "{0}" ~= "{1}" => {2}'.format(self.event, item.event, fnmatch.fnmatch(self.event, item.event)))
                logger.debug('isInConfig(): "{0}" ~= "{1}" => {2}'.format(self.dataToJSON(), item.data, fnmatch.fnmatch(self.dataToJSON(), item.data)))
                if fnmatch.fnmatch(self.event, item.event) and fnmatch.fnmatch(self.dataToJSON(), item.data):
                    self.command = item.command
                    return True
        return False

    def dataToJSON(self):
        if isinstance(self.data, str):
            return  self.data
        else:
            return json.dumps(self.data, default=lambda o: o.__dict__)


if __name__ == '__main__':

    # setup logging
    logger = logging.getLogger("root") # create a logger called root
    logger.setLevel(LOG_LEVEL)
    ch = logging.StreamHandler() # create console handler
    fh = logging.FileHandler(LOG_FILE) # create file handler
    ch.setFormatter(helpers.TerminalColorFormatter()) # formatter of console handler
    fh.setFormatter(helpers.FileFormatter()) # set formatter of file handler
    logger.addHandler(ch) # add handlers to logger
    logger.addHandler(fh)
    logging.captureWarnings(True) # also capture warnings from other libs
    http.client.HTTPConnection.debuglevel = 1 if LOG_LEVEL == logging.DEBUG else 0
    http.client.print = lambda *args: logger.debug("http - "+" ".join(args)) # hook the print function in http to logger.debug

    # Parse JSON into an object with attributes corresponding to dict keys.
    with open(CONFIG_FILE) as file:
        config = json.load(file, object_hook = lambda d: SimpleNamespace(**d))

    config.token = get_info('token')
    if config.token == False:
        logger.error(f'Variable "$token" not found in {INFO_FILE}.')
        exit(1)

    url = get_info(INFO_FILE_URL)
    if url == False:
        logger.error(f'Variable "${INFO_FILE_URL}" not found in {INFO_FILE}.')
        exit(1)

    # mode 1: if the event is given via command line execute it
    if len(sys.argv) >= 2:
        arg = json.loads(sys.argv[1], object_hook = lambda d: SimpleNamespace(**d))

        # setup the event object
        event = Event(arg.event)
        event.id = arg.id
        event.data = arg.data

        if event.isInConfig():
            event.trigger()
        else:
            logger.warning('Event not found on config')
            exit(1)

    # mode 2: listen for events
    else:
        if not hasattr(config, 'listen'):
            logger.warning('No events to listen to in config.')
            exit(1) 

        for item in config.listen:
            logger.info('Listening for event "{0:s}" with data "{1:s}".'.format(item.event, item.data))

        logger.info("Starting event stream...")

        url = url.replace('ticket/config', 'event/agent', 1)
        url = url.format(token = config.token)
        eventFullyRecieved = False
        last_line = None
        event = Event("None")

        while True:
            logger.info('Getting URL {0:s}.'.format(url))
            r = requests.get(url, stream=True, timeout=(20, 20)) # timeout=(connect, read)
            logger.debug('status code {code:d}'.format(code = r.status_code))
            if r.status_code == 200:
                logger.info('Stream successfully started.')
            elif r.status_code == 409:
                logger.warning('Conflict: The ressource is exclusively locked, trying again later.')
            else: 
                logger.error(f'HTTP return code was {r.status_code}, trying again later.')
                retry = 5000

            # iterate over lines of output
            for line in r.iter_lines():
                decoded_line = line.decode('utf-8')
                logger.debug('raw output: {line:s}'.format(line = decoded_line))
                if r.status_code == 200:
                    if decoded_line == "0": eventFullyRecieved = False
                    if decoded_line == "": eventFullyRecieved = False
                    if decoded_line == "" and last_line != "0": eventFullyRecieved = True
                    if decoded_line != "0" and decoded_line != "":
                        try: key, value = decoded_line.split(":", 1)
                        except ValueError: key, value = decoded_line, ""
                        key = key.strip()
                        value = value.strip()

                        if key == "event":
                            event = Event(value)
                            eventFullyRecieved = False
                        if key == "id":
                            event.id = int(value)
                            eventFullyRecieved = False
                        if key == "data":
                            try: event.data = json.loads(value, object_hook=lambda d: SimpleNamespace(**d)).data
                            except json.decoder.JSONDecodeError: event.data = value
                            eventFullyRecieved = False
                        if key == "retry":
                            event.retry = int(value)
                            retry = int(value)
                            eventFullyRecieved = False

                    if eventFullyRecieved and event.isInConfig():
                        event.trigger()

                    last_line = decoded_line

            logger.info('Sleeping {0:0.2f} seconds ...'.format(retry/1000))
            time.sleep(retry/1000)
